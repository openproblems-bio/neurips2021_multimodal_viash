#!/usr/bin/env bash

################################
#    baseline_newwave 1.3.0    #
################################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "baseline_newwave 1.3.0"
  echo "Concatenated NewWave."
  echo
  echo "Options:"

  echo "   --input_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_mod1.h5ad"
  echo "        Censored dataset."
  echo ""


  echo "   --input_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_mod2.h5ad"
  echo "        Censored dataset."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        The predicted pairing of test mod1&mod2 profiles."
  echo ""


  echo "   --maxiter"
  echo "        type: integer"
  echo "        default: 100"
  echo "        Maximum number of NewWave iterations."
  echo ""


  echo "   --k"
  echo "        type: integer"
  echo "        default: 10"
  echo "        NewWave K parameter."
  echo ""


  echo "   --hvg_sel"
  echo "        type: integer"
  echo "        default: 1000"
  echo "        Number of features per modality to use."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "baseline_newwave 1.3.0"
            exit
            ;;
        --input_mod1)
            VIASH_PAR_INPUT_MOD1="$2"
            shift 2
            ;;
        --input_mod1=*)
            VIASH_PAR_INPUT_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_mod2)
            VIASH_PAR_INPUT_MOD2="$2"
            shift 2
            ;;
        --input_mod2=*)
            VIASH_PAR_INPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --maxiter)
            VIASH_PAR_MAXITER="$2"
            shift 2
            ;;
        --maxiter=*)
            VIASH_PAR_MAXITER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --k)
            VIASH_PAR_K="$2"
            shift 2
            ;;
        --k=*)
            VIASH_PAR_K=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --hvg_sel)
            VIASH_PAR_HVG_SEL="$2"
            shift 2
            ;;
        --hvg_sel=*)
            VIASH_PAR_HVG_SEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_MOD1" ]; then
  ViashError '--input_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MOD2" ]; then
  ViashError '--input_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MAXITER" ]; then
  VIASH_PAR_MAXITER="100"
fi
if [ -z "$VIASH_PAR_K" ]; then
  VIASH_PAR_K="10"
fi
if [ -z "$VIASH_PAR_HVG_SEL" ]; then
  VIASH_PAR_HVG_SEL="1000"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-baseline_newwave-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
requireNamespace("anndata", quietly = TRUE)
library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
requireNamespace("NewWave", quietly = TRUE)
requireNamespace("SingleCellExperiment", quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_MOD1'"; else echo NULL; fi ),
  "input_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_MOD2'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi ),
  "maxiter" = $( if [ ! -z ${VIASH_PAR_MAXITER+x} ]; then echo "as.integer($VIASH_PAR_MAXITER)"; else echo NULL; fi ),
  "k" = $( if [ ! -z ${VIASH_PAR_K+x} ]; then echo "as.integer($VIASH_PAR_K)"; else echo NULL; fi ),
  "hvg_sel" = $( if [ ! -z ${VIASH_PAR_HVG_SEL+x} ]; then echo "as.integer($VIASH_PAR_HVG_SEL)"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

method_id <- meta\$functionality_name

cat("Reading mod1 h5ad\\n")
input_mod1 <- anndata::read_h5ad(par\$input_mod1)

rn <- rownames(input_mod1)
batch <- input_mod1\$obs\$batch
dataset_id <- input_mod1\$uns[["dataset_id"]]

sd1 <- proxyC::colSds(input_mod1\$X)
fil1 <-
  if (!is.null(par\$hvg_sel) && ncol(input_mod1) > par\$hvg_sel) {
    head(order(sd1, decreasing = TRUE), par\$hvg_sel)
  } else {
    which(sd1 > 0)
  }
data1 <- SummarizedExperiment::SummarizedExperiment(
  assays = list(counts = t(input_mod1\$layers[["counts"]][, fil1])),
  colData = data.frame(batch = factor(batch))
)
rm(input_mod1)
gc()

cat("Running NewWave on mod1\\n")
res1 <- NewWave::newWave(
  data1,
  X = "~batch",
  verbose = TRUE,
  K = par\$k,
  maxiter_optimize = par\$maxiter,
  n_gene_par = min(300, nrow(data1)),
  n_cell_par = min(300, ncol(data1)),
  commondispersion = FALSE
)
rm(data1)

dr_x1 <- SingleCellExperiment::reducedDim(res1)

cat("Reading mod2 anndata\\n")
input_mod2 <- anndata::read_h5ad(par\$input_mod2)
sd2 <- proxyC::colSds(input_mod2\$X)
fil2 <-
  if (!is.null(par\$hvg_sel) && ncol(input_mod2) > par\$hvg_sel) {
    head(order(sd2, decreasing = TRUE), par\$hvg_sel)
  } else {
    which(sd2 > 0)
  }
data2 <- SummarizedExperiment::SummarizedExperiment(
  assays = list(counts = t(input_mod2\$layers[["counts"]][, fil2])),
  colData = data.frame(batch = factor(batch))
)
rm(input_mod2)
gc()

cat("Running NewWave on mod2\\n")
res2 <- NewWave::newWave(
  data2,
  X = "~batch",
  verbose = TRUE,
  K = par\$k,
  maxiter_optimize = par\$maxiter,
  n_gene_par = min(300, nrow(data2)),
  n_cell_par = min(300, ncol(data2)),
  commondispersion = FALSE
)
dr_x2 <- SingleCellExperiment::reducedDim(res2)
rm(data2)

cat("Spline separate DRs\\n")
dr <- do.call(cbind, lapply(seq_len(ncol(dr_x1)), function(i) {
  cbind(dr_x1[, i], dr_x2[, i])
}))

rownames(dr) <- rn
colnames(dr) <- paste0("comp_", seq_len(ncol(dr)))

out <- anndata::AnnData(
  X = dr,
  uns = list(
    dataset_id = dataset_id,
    method_id = meta\$functionality_name
  )
)

cat("Writing predictions to file\\n")
zzz <- out\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
