#!/usr/bin/env bash

########################################
#    download_azimuth_dataset 1.2.0    #
########################################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Christopher Lance <clance.connect@gmail.com> (author, maintainer) {github: xlancelottx}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "download_azimuth_dataset 1.2.0"
  echo "Download CITE-seq data from Azimuth reference"
  echo
  echo "Usage: download_azimuth_dataset \\"
  echo "Usage:   --id azimuth_ref \\"
  echo "Usage:   --input_count https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE164378&format=file \\"
  echo "Usage:   --input_meta https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE164378&format=file&file=GSE164378%5Fsc%2Emeta%2Edata%5F3P%2Ecsv%2Egz \\"
  echo "Usage:   --out_raw_count resources_test_2/common/azimuth_raw/GSE164378_RAW.tar \\"
  echo "Usage:   --out_raw_meta resources_test_2/common/azimuth_raw/GSE164378_sc.meta.data_3P.csv.gz \\"
  echo "Usage:   --output_rna resources_test_2/common/azimuth_ref_output_rna.h5ad \\"
  echo "Usage:   --output_mod2 resources_test_2/common/azimuth_ref_output_mod2.h5ad"
  echo "Options:"

  echo "   --id"
  echo "        type: string, required parameter"
  echo "        example: azimuth_ref"
  echo "        The id of the output dataset id"
  echo ""


  echo "   --input_count"
  echo "        type: string, required parameter"
  echo "        example: https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE164378&format=file"
  echo "        Location URL to the GEO raw counts tar file"
  echo ""


  echo "   --input_meta"
  echo "        type: string, required parameter"
  echo "        example: https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE164378&format=file&file=GSE164378%5Fsc%2Emeta%2Edata%5F3P%2Ecsv%2Egz"
  echo "        Location URL to the GEO meta data file"
  echo ""


  echo "   --organism"
  echo "        type: string, required parameter"
  echo "        example: human"
  echo "        The organism of the dataset"
  echo ""


  echo "   --output_rna"
  echo "        type: file, required parameter, output"
  echo "        example: output_rna.h5ad"
  echo "        Output h5ad RNA file."
  echo ""


  echo "   --output_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: output_mod2.h5ad"
  echo "        Output h5ad modality2 file (ATAC or Antibody capture)."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "download_azimuth_dataset 1.2.0"
            exit
            ;;
        --id)
            VIASH_PAR_ID="$2"
            shift 2
            ;;
        --id=*)
            VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_count)
            VIASH_PAR_INPUT_COUNT="$2"
            shift 2
            ;;
        --input_count=*)
            VIASH_PAR_INPUT_COUNT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_meta)
            VIASH_PAR_INPUT_META="$2"
            shift 2
            ;;
        --input_meta=*)
            VIASH_PAR_INPUT_META=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --organism)
            VIASH_PAR_ORGANISM="$2"
            shift 2
            ;;
        --organism=*)
            VIASH_PAR_ORGANISM=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_rna)
            VIASH_PAR_OUTPUT_RNA="$2"
            shift 2
            ;;
        --output_rna=*)
            VIASH_PAR_OUTPUT_RNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_mod2)
            VIASH_PAR_OUTPUT_MOD2="$2"
            shift 2
            ;;
        --output_mod2=*)
            VIASH_PAR_OUTPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_ID" ]; then
  ViashError '--id' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_COUNT" ]; then
  ViashError '--input_count' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_META" ]; then
  ViashError '--input_meta' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_ORGANISM" ]; then
  ViashError '--organism' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_RNA" ]; then
  ViashError '--output_rna' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_MOD2" ]; then
  ViashError '--output_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-download_azimuth_dataset-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
print("Load dependencies")
import urllib.request
import tempfile
import anndata
import scanpy as sc
import pandas as pd

import tarfile
import numpy as np
import gzip
import scipy.io

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'id': $( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "'$VIASH_PAR_ID'"; else echo None; fi ),
  'input_count': $( if [ ! -z ${VIASH_PAR_INPUT_COUNT+x} ]; then echo "'$VIASH_PAR_INPUT_COUNT'"; else echo None; fi ),
  'input_meta': $( if [ ! -z ${VIASH_PAR_INPUT_META+x} ]; then echo "'$VIASH_PAR_INPUT_META'"; else echo None; fi ),
  'organism': $( if [ ! -z ${VIASH_PAR_ORGANISM+x} ]; then echo "'$VIASH_PAR_ORGANISM'"; else echo None; fi ),
  'output_rna': $( if [ ! -z ${VIASH_PAR_OUTPUT_RNA+x} ]; then echo "'$VIASH_PAR_OUTPUT_RNA'"; else echo None; fi ),
  'output_mod2': $( if [ ! -z ${VIASH_PAR_OUTPUT_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_MOD2'"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH END

###############################################################################
###                     DOWNLOAD AND READ DATA.                             ###
###############################################################################
print("Downloading file from", par['input_count'])
tar_temp = tempfile.NamedTemporaryFile()
url = par['input_count']
urllib.request.urlretrieve(url, tar_temp.name)

print("Downloading meta data from", par['input_meta'])
meta_temp = tempfile.NamedTemporaryFile()
url = par['input_meta']
urllib.request.urlretrieve(url, meta_temp.name)

###############################################################################
###                      EXTRACT AND CREATE H5ADs                           ###
###############################################################################

print("Extracting and create h5ads")
samples = ['GSM5008737_RNA_3P', 'GSM5008738_ADT_3P'] # first sample is rna, second is protein data

adatas = []        
with tarfile.open(tar_temp.name) as tar:

    for sample in samples:
        print("Processing sample " + sample)
        with gzip.open(tar.extractfile(sample + '-matrix.mtx.gz'), 'rb') as mm:
            print('Loading matrix')
            X = scipy.io.mmread(mm).T.tocsr()
        obs = pd.read_csv(
            tar.extractfile(sample + '-barcodes.tsv.gz'), 
            compression='gzip',
            header=None, 
            sep='\\t',
            index_col=0
        )
        obs.index.name = None
        var = pd.read_csv(
            tar.extractfile(sample + '-features.tsv.gz'), 
            compression='gzip',
            header=None, 
            sep='\\t'
        ).iloc[:, :1]
        var.columns = ['names']
        var.index = var['names'].values
        adata = anndata.AnnData(X=X, obs=obs, var=var)

        adata.var_names_make_unique()
        adatas.append(adata)

    tar.close()

adata = adatas[0]
protein = adatas[1]

###############################################################################
###                            POST PROCESS                                 ###
###############################################################################
print("Reading metadata")
meta = pd.read_csv(meta_temp.name, index_col = 0, compression = "gzip")
meta_adt = meta.loc[:,~meta.columns.str.endswith('RNA')]
meta_rna = meta.loc[:,~meta.columns.str.endswith('ADT')]

print("Setting additional output fields")
# set obs
adata.obs = adata.obs.join(meta_rna).rename(columns = {'Batch':'seq_batch', 'donor':'batch'})
adata.obs['cell_type'] = adata.obs['celltype.l2']

protein.obs = protein.obs.join(meta_adt).rename(columns = {'Batch':'seq_batch', 'donor':'batch'})
protein.obs['cell_type'] = protein.obs['celltype.l2']

#  set var
adata.var['feature_types'] = "GEX"
protein.var['feature_types'] = "ADT"

# set uns 
uns = { "dataset_id" : par["id"], "organism" : par["organism"] }
adata.uns = uns
protein.uns = uns


###############################################################################
###                             SAVE OUTPUT                                 ###
###############################################################################
print("Saving output")
adata.write_h5ad(par['output_rna'], compression = "gzip")
protein.write_h5ad(par['output_mod2'], compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
