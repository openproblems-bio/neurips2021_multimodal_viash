#!/usr/bin/env bash

#############################
#    latent_mixing 1.0.2    #
#############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Ann Chen <ann.chen@czbiohub.org> (author, maintainer) {github: atchen}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "latent_mixing 1.0.2"
  echo "Calculate latent mixing metric for joint embedding task."
  echo
  echo "Options:"

  echo "   --input_prediction"
  echo "        type: file, required parameter"
  echo "        example: prediction.h5ad"
  echo "        Prediction by a method"
  echo ""


  echo "   --input_solution"
  echo "        type: file, required parameter"
  echo "        example: solution.h5ad"
  echo "        Gold standard solution"
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Latent mixing metric measures how well the latent cell representations are mixed between batches relative to the global frequency of batches."
  echo ""


  echo "   --n_neighbors"
  echo "        type: integer"
  echo "        default: 100"
  echo "        Number of neighbors for the entropy_batch_mixing metric."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "latent_mixing 1.0.2"
            exit
            ;;
        --input_prediction)
            VIASH_PAR_INPUT_PREDICTION="$2"
            shift 2
            ;;
        --input_prediction=*)
            VIASH_PAR_INPUT_PREDICTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_solution)
            VIASH_PAR_INPUT_SOLUTION="$2"
            shift 2
            ;;
        --input_solution=*)
            VIASH_PAR_INPUT_SOLUTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_neighbors)
            VIASH_PAR_N_NEIGHBORS="$2"
            shift 2
            ;;
        --n_neighbors=*)
            VIASH_PAR_N_NEIGHBORS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
  ViashError '--input_prediction' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
  ViashError '--input_solution' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_NEIGHBORS" ]; then
  VIASH_PAR_N_NEIGHBORS="100"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-latent_mixing-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
import anndata as ad
import numpy as np
import scipy
from sklearn.neighbors import NearestNeighbors

# VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_prediction': $( if [ ! -z ${VIASH_PAR_INPUT_PREDICTION+x} ]; then echo "'$VIASH_PAR_INPUT_PREDICTION'"; else echo None; fi ),
  'input_solution': $( if [ ! -z ${VIASH_PAR_INPUT_SOLUTION+x} ]; then echo "'$VIASH_PAR_INPUT_SOLUTION'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'n_neighbors': $( if [ ! -z ${VIASH_PAR_N_NEIGHBORS+x} ]; then echo "int('$VIASH_PAR_N_NEIGHBORS')"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

# VIASH END

print("Read input files")
predict_adata = ad.read_h5ad(par["input_prediction"])
solution_adata = ad.read_h5ad(par["input_solution"])

print("Merge prediction with solution")
merged_adata = predict_adata.copy()

batch_val = solution_adata.obs["batch"].astype(str)
batch_unique_values, batch_index = np.unique(batch_val, return_inverse=True)

merged_adata.obs["batch"] = batch_index

def entropy_batch_mixing(
    latent_space, batches, n_neighbors=50, n_pools=50, n_samples_per_pool=100
):

    def neg_kl(hist_data, global_freq):
        n_batches = len(np.unique(hist_data))
        if n_batches > 2:
            raise ValueError("Should be only two clusters for this metric")
        frequency = np.mean(hist_data == 1)
        if frequency == 0 or frequency == 1:
            return 0
        return -(
            frequency * np.log(frequency / global_freq)
            + (1 - frequency) * np.log((1 - frequency) / (1 - global_freq))
        )

    n_neighbors = min(n_neighbors, len(latent_space) - 1)
    nne = NearestNeighbors(n_neighbors=1 + n_neighbors, n_jobs=8)
    nne.fit(latent_space)
    kmatrix = nne.kneighbors_graph(latent_space) - scipy.sparse.identity(
        latent_space.shape[0]
    )

    global_freq = np.mean(batches)
    print(global_freq)
    score = 0
    for t in range(n_pools):
        indices = np.random.choice(
            np.arange(latent_space.shape[0]), size=n_samples_per_pool
        )
        score += np.mean(
            [
                neg_kl(
                    batches[  # the batches of cell i's neighbors
                        kmatrix[indices].nonzero()[
                            1
                        ][  # the neighbors of cell i (columns in row i)
                            kmatrix[indices].nonzero()[0] == i  # the row of cell i
                        ]
                    ],
                    global_freq,
                )
                for i in range(n_samples_per_pool)
            ]
        )
    return score / float(n_pools)


print("Calculate latent mixing metric")
latent_mixing = entropy_batch_mixing(
    latent_space=merged_adata.X,
    batches=merged_adata.obs["batch"].values,
    n_neighbors=par["n_neighbors"]
)

print("Write output")
adata_out = ad.AnnData(
    uns = {
        "dataset_id": predict_adata.uns["dataset_id"],
        "method_id" : predict_adata.uns["method_id"],
        "metric_ids" : ["latent_mixing"],
        "metric_values" : [latent_mixing]
    }
)

adata_out.write_h5ad(par['output'], compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
