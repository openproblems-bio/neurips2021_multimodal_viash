#!/usr/bin/env bash

##############################
#    censor_dataset 1.0.2    #
##############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Louise Deconinck <louise.deconinck@gmail.com> (author, maintainer) {github: LouiseDck, orcid: }
# * Robrecht Cannoodt <rcannood@gmail.com> (contributor) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "censor_dataset 1.0.2"
  echo "Censor an existing dataset: obfuscate gene names, remove cell identities and"
  echo "shuffle cells of modalities, for distribution to competitors."
  echo
  echo "Options:"

  echo "   --input_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset.h5ad"
  echo "        The first modality of the input dataset to be censored"
  echo ""


  echo "   --input_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset.h5ad"
  echo "        The second modality of the input dataset to be censored"
  echo ""


  echo "   --output_train_mod1"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod1 profiles."
  echo ""


  echo "   --output_train_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod2 profiles."
  echo ""


  echo "   --output_train_sol"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of train mod1&mod2 profiles."
  echo ""


  echo "   --output_test_mod1"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod1 profiles."
  echo ""


  echo "   --output_test_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod2 profiles."
  echo ""


  echo "   --output_test_sol"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of test mod1&mod2 profiles."
  echo ""


  echo "   --knn"
  echo "        type: integer"
  echo "        default: 20"
  echo "        The KNN cutoff for computing nearest neighbors on the mod1 and mod2 profiles."
  echo ""


  echo "   --seed"
  echo "        type: integer"
  echo "        default: 1"
  echo "        The seed."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "censor_dataset 1.0.2"
            exit
            ;;
        --input_mod1)
            VIASH_PAR_INPUT_MOD1="$2"
            shift 2
            ;;
        --input_mod1=*)
            VIASH_PAR_INPUT_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_mod2)
            VIASH_PAR_INPUT_MOD2="$2"
            shift 2
            ;;
        --input_mod2=*)
            VIASH_PAR_INPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_mod1)
            VIASH_PAR_OUTPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --output_train_mod1=*)
            VIASH_PAR_OUTPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_mod2)
            VIASH_PAR_OUTPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --output_train_mod2=*)
            VIASH_PAR_OUTPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_sol)
            VIASH_PAR_OUTPUT_TRAIN_SOL="$2"
            shift 2
            ;;
        --output_train_sol=*)
            VIASH_PAR_OUTPUT_TRAIN_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_mod1)
            VIASH_PAR_OUTPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --output_test_mod1=*)
            VIASH_PAR_OUTPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_mod2)
            VIASH_PAR_OUTPUT_TEST_MOD2="$2"
            shift 2
            ;;
        --output_test_mod2=*)
            VIASH_PAR_OUTPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_sol)
            VIASH_PAR_OUTPUT_TEST_SOL="$2"
            shift 2
            ;;
        --output_test_sol=*)
            VIASH_PAR_OUTPUT_TEST_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --knn)
            VIASH_PAR_KNN="$2"
            shift 2
            ;;
        --knn=*)
            VIASH_PAR_KNN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --seed)
            VIASH_PAR_SEED="$2"
            shift 2
            ;;
        --seed=*)
            VIASH_PAR_SEED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_MOD1" ]; then
  ViashError '--input_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MOD2" ]; then
  ViashError '--input_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD1" ]; then
  ViashError '--output_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD2" ]; then
  ViashError '--output_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_SOL" ]; then
  ViashError '--output_train_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD1" ]; then
  ViashError '--output_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD2" ]; then
  ViashError '--output_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_SOL" ]; then
  ViashError '--output_test_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_KNN" ]; then
  VIASH_PAR_KNN="20"
fi
if [ -z "$VIASH_PAR_SEED" ]; then
  VIASH_PAR_SEED="1"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-censor_dataset-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
requireNamespace("anndata", quietly = TRUE)
library(assertthat, quietly = TRUE, warn.conflicts = FALSE)
library(Matrix, quietly = TRUE, warn.conflicts = FALSE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_MOD1'"; else echo NULL; fi ),
  "input_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_MOD2'"; else echo NULL; fi ),
  "output_train_mod1" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD1'"; else echo NULL; fi ),
  "output_train_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD2'"; else echo NULL; fi ),
  "output_train_sol" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_SOL+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_SOL'"; else echo NULL; fi ),
  "output_test_mod1" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD1'"; else echo NULL; fi ),
  "output_test_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD2'"; else echo NULL; fi ),
  "output_test_sol" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_SOL+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_SOL'"; else echo NULL; fi ),
  "knn" = $( if [ ! -z ${VIASH_PAR_KNN+x} ]; then echo "as.integer($VIASH_PAR_KNN)"; else echo NULL; fi ),
  "seed" = $( if [ ! -z ${VIASH_PAR_SEED+x} ]; then echo "as.integer($VIASH_PAR_SEED)"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

set.seed(par\$seed)

cat("Reading input data\\n")
input_mod1 <- anndata::read_h5ad(par\$input_mod1)
input_mod2 <- anndata::read_h5ad(par\$input_mod2)
ad1_mod <- unique(input_mod1\$var[["feature_types"]])
ad2_mod <- unique(input_mod2\$var[["feature_types"]])
new_dataset_id <- paste0(input_mod1\$uns[["dataset_id"]], "_MM_", tolower(ad1_mod), "2", tolower(ad2_mod))
common_uns <- list(dataset_id = new_dataset_id)

cat("Shuffle train cells\\n")
train_ix <- which(input_mod1\$obs\$is_train) %>% sort
train_mod2_ix <- sample.int(length(train_ix))

cat("Shuffle test cells\\n")
test_ix <- which(!input_mod1\$obs\$is_train) %>% sort
test_mod2_ix <- sample.int(length(test_ix))

is_categorical <- function(x) is.character(x) || is.factor(x)
# relevel <- function(x) factor(as.character(x))
relevel <- function(x) as.character(x)

cat("Creating train objects\\n")
mod1_var <- input_mod1\$var %>% select(one_of("gene_ids", "feature_types"))
mod2_var <- input_mod2\$var %>% select(one_of("gene_ids", "feature_types"))
train_obs1 <- input_mod1\$obs[train_ix, , drop = FALSE] %>% 
  select(one_of("batch", "size_factors")) %>% 
  mutate_if(is_categorical, relevel)
train_obs2 <- input_mod2\$obs[train_ix, , drop = FALSE] %>% 
  select(one_of("size_factors")) %>% 
  mutate_if(is_categorical, relevel)
rownames(train_obs2) <- NULL
if (ncol(train_obs2) == 0) train_obs2 <- NULL

output_train_mod1 <- anndata::AnnData(
  X = input_mod1\$X[train_ix, , drop = FALSE],
  layers = list(counts = input_mod1\$layers[["counts"]][train_ix, , drop = FALSE]),
  obs = train_obs1,
  var = mod1_var,
  uns = common_uns
)
output_train_mod2 <- anndata::AnnData(
  X = input_mod2\$X[train_ix[train_mod2_ix], , drop = FALSE] %>%
    magrittr::set_rownames(., paste0("cell_", seq_len(nrow(.)))),
  layers = list(counts = input_mod2\$layers[["counts"]][train_ix[train_mod2_ix], , drop = FALSE] %>%
    magrittr::set_rownames(., paste0("cell_", seq_len(nrow(.))))),
  obs = train_obs2,
  var = mod2_var,
  uns = common_uns
)

cat("Create test objects\\n")
test_obs1 <- input_mod1\$obs[test_ix, , drop = FALSE] %>% 
  select(one_of("batch", "size_factors")) %>% 
  mutate_if(is_categorical, relevel)
test_obs2 <- input_mod1\$obs[test_ix, , drop = FALSE] %>% 
  select(one_of("size_factors")) %>% 
  mutate_if(is_categorical, relevel)
rownames(test_obs2) <- NULL
if (ncol(test_obs2) == 0) test_obs2 <- NULL

output_test_mod1 <- anndata::AnnData(
  X = input_mod1\$X[test_ix, , drop = FALSE],
  layers = list(counts = input_mod1\$layers[["counts"]][test_ix, , drop = FALSE]),
  obs = test_obs1,
  var = mod1_var,
  uns = common_uns
)
output_test_mod2 <- anndata::AnnData(
  X = input_mod2\$X[test_ix[test_mod2_ix], , drop = FALSE] %>% 
    magrittr::set_rownames(., paste0("cell_", seq_len(nrow(.)))),
  layers = list(counts = input_mod2\$layers[["counts"]][test_ix[test_mod2_ix], , drop = FALSE] %>% 
    magrittr::set_rownames(., paste0("cell_", seq_len(nrow(.))))),
  obs = test_obs2,
  var = mod2_var,
  uns = common_uns
)

cat("Create solution objects\\n")

train_sol_mat <- Matrix::sparseMatrix(
  i = seq_along(train_mod2_ix),
  j = order(train_mod2_ix),
  x = rep(1, length(train_mod2_ix))
)
output_train_sol <- anndata::AnnData(
  X = train_sol_mat,
  obs = input_mod1\$obs[train_ix, , drop = FALSE] %>% select(one_of(c("batch"))) %>% mutate_if(is_categorical, relevel),
  uns = list(dataset_id = new_dataset_id, pairing_ix = train_mod2_ix - 1)
)

test_sol_mat <- Matrix::sparseMatrix(
  i = seq_along(test_mod2_ix),
  j = order(test_mod2_ix),
  x = rep(1, length(test_mod2_ix))
)
output_test_sol <- anndata::AnnData(
  X = test_sol_mat,
  obs = input_mod1\$obs[test_ix, , drop = FALSE] %>% select(one_of(c("batch"))) %>% mutate_if(is_categorical, relevel),
  uns = list(dataset_id = new_dataset_id, pairing_ix = test_mod2_ix - 1)
)

# checks
# mean(rowSums(train_solknn > 0))
# mean(rowSums(test_solknn > 0))
# sum(train_solknn * train_sol_mat) == nrow(train_sol_mat)
# sum(test_solknn * test_sol_mat) == nrow(test_sol_mat)

cat("Saving output files as h5ad\\n")
zzz <- output_train_mod1\$write_h5ad(par\$output_train_mod1, compression = "gzip")
zzz <- output_train_mod2\$write_h5ad(par\$output_train_mod2, compression = "gzip")
zzz <- output_train_sol\$write_h5ad(par\$output_train_sol, compression = "gzip")
zzz <- output_test_mod1\$write_h5ad(par\$output_test_mod1, compression = "gzip")
zzz <- output_test_mod2\$write_h5ad(par\$output_test_mod2, compression = "gzip")
zzz <- output_test_sol\$write_h5ad(par\$output_test_sol, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
