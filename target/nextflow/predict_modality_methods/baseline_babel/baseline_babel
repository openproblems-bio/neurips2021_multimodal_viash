#!/usr/bin/env bash

##############################
#    baseline_babel 1.0.2    #
##############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Alejandro Granados <alejandro.granados@czbiohub.org> (author, maintainer) {github: agranado}
# * Robrecht Cannoodt <rcannood@gmail.com> (contributor) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "baseline_babel 1.0.2"
  echo "Learn a deep-learning model with BABEL."
  echo
  echo "Options:"

  echo "   --input_train_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The train mod1 profiles."
  echo ""


  echo "   --input_train_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The train mod2 profiles."
  echo ""


  echo "   --input_test_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The test mod1 profiles."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        The predicted test mod2 profiles."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "baseline_babel 1.0.2"
            exit
            ;;
        --input_train_mod1)
            VIASH_PAR_INPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --input_train_mod1=*)
            VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_mod2)
            VIASH_PAR_INPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --input_train_mod2=*)
            VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod1)
            VIASH_PAR_INPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --input_test_mod1=*)
            VIASH_PAR_INPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
  ViashError '--input_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
  ViashError '--input_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
  ViashError '--input_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-baseline_babel-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat(">> Loading dependencies\\n")

requireNamespace("anndata", quietly = TRUE)
library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
library(testthat, warn.conflicts = FALSE, quietly = TRUE)
requireNamespace("DropletUtils", quietly = TRUE)

options(tidyverse.quiet = TRUE)
library(tidyverse)

babel_location <- "/babel/bin/"
conda_bin <- "/opt/conda/bin/conda"

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_train_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD1'"; else echo NULL; fi ),
  "input_train_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD2'"; else echo NULL; fi ),
  "input_test_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD1'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

# check modalities first, and exit if it is not ATAC
mod1 <- anndata::read_h5ad(par\$input_train_mod1, backed = TRUE)\$var\$feature_types[[1]]
mod2 <- anndata::read_h5ad(par\$input_train_mod2, backed = TRUE)\$var\$feature_types[[1]]

if (mod2 != "ATAC") {
  cat("Error: babel only runs on GEX to ATAC datasets\\n")
  quit(save = "no", status = 42)
}

cat(">> Reading h5ad files\\n")
input_train_mod1 <- anndata::read_h5ad(par\$input_train_mod1)
input_train_mod2 <- anndata::read_h5ad(par\$input_train_mod2)
input_test_mod1 <- anndata::read_h5ad(par\$input_test_mod1)
if (is.null(input_train_mod1\$var\$gene_ids)) input_train_mod1\$var\$gene_ids <- colnames(input_train_mod1)
if (is.null(input_train_mod2\$var\$gene_ids)) input_train_mod2\$var\$gene_ids <- colnames(input_train_mod2)
if (is.null(input_test_mod1\$var\$gene_ids)) input_test_mod1\$var\$gene_ids <- colnames(input_test_mod1)

# multiome_matrix for export to Babel's input format
multiome_matrix <- cbind(input_train_mod1\$X, input_train_mod2\$X)

# generate multiome anndata object for training
ad_babel <- anndata::AnnData(
  X = multiome_matrix,
  var = bind_rows(input_train_mod1\$var, input_train_mod2\$var)
)

# setting up babel dirs
tmpdir <- tempfile(pattern = "babel_temp", fileext = "/")
cat(">> Setting up directories for babel at ", tmpdir, "\\n", sep = "")
dir.create(tmpdir)
on.exit(unlink(tmpdir, recursive = TRUE))

dir_data <- paste0(tmpdir, "data/")     # location of input files
dir.create(dir_data)
dir_model <- paste0(tmpdir, "model/")   # location of babel model
dir_pred <- paste0(tmpdir, "pred/")     # location of predictions

feature_type_map <- c(
  "GEX" = "Gene Expression",
  "ADT" = "Peaks", # try to make it run on ADT data as well
  "ATAC" = "Peaks"
)

cat(">> Writing train dataset as 10x-CellRanger H5 format\\n")
DropletUtils::write10xCounts(
  paste0(dir_data, "train_input.h5"),
  t(ad_babel\$X),
  gene.id = ad_babel\$var\$gene_ids,
  gene.symbol = colnames(ad_babel),
  barcodes = rownames(ad_babel),
  type = "HDF5",
  version = "3",
  genome = "GRCh38",
  gene.type = unname(feature_type_map[ad_babel\$var\$feature_types]),
  overwrite = TRUE
)

cat(">> Writing test dataset as 10x-CellRanger H5 format\\n")
DropletUtils::write10xCounts(
  paste0(dir_data, "test_input.h5"),
  t(input_test_mod1\$X),
  gene.id = input_test_mod1\$var\$gene_ids,
  gene.symbol = colnames(input_test_mod1),
  barcodes = rownames(input_test_mod1),
  type = "HDF5",
  version = "3",
  genome = "GRCh38",
  gene.type = unname(feature_type_map[input_test_mod1\$var\$feature_types]),
  overwrite = TRUE
)


cat(">> Babel: train model\\n")
# bad attempt at getting the protein predictor to work
babel_train_cmd <- 
  # if (mod2 == "ATAC") { 
    paste0(
      conda_bin, " run -n babel ",
      "python ", babel_location, "train_model.py ",
      "--data ", dir_data, "train_input.h5 ",
      "--outdir ", dir_model, " ",
      "--nofilter"
    )
  # } else if (mod2 == "ADT") {
  #   paste0(
  #     conda_bin, " run -n babel ",
  #     "python ", babel_location, "train_protein_predictor.py ",
  #     "--rnaCounts ", dir_data, "train_input.h5 ",
  #     "--outdir ", dir_model, " ",
  #     "--nofilter"
  #   )
  # }

out1 <- system(babel_train_cmd)

# check whether training succeeded
expect_equal(out1, 0, info = paste0("Model training failed with exit code ", out1))

cat(">> Babel: predict from model\\n")
babel_pred_cmd <- paste0(
  conda_bin, " run -n babel ",
  "python ", babel_location, "predict_model.py ",
  "--checkpoint ", dir_model, " ",
  "--data ", dir_data, "test_input.h5 ",
  "--outdir ", dir_pred, " ",
  "--nofilter"
)
out2 <- system(babel_pred_cmd)

# check whether prediction succeeded
expect_equal(out2, 0, info = paste0("Prediction failed with exit code ", out1))

cat(">> Read predictions\\n")
pred <- anndata::read_h5ad(paste0(dir_pred, "/rna_atac_adata.h5ad"))

cat(">> Creating output object\\n")
pred_long <-
  summary(pred\$X) %>%
  mutate(
    i = match(rownames(pred), rownames(input_test_mod1))[i],
    j = match(colnames(pred), colnames(input_train_mod2))[j]
  )
pred_expanded <-
  Matrix::sparseMatrix(
    i = pred_long\$i,
    j = pred_long\$j,
    x = pred_long\$x,
    dims = c(nrow(input_test_mod1), ncol(input_train_mod2)),
    dimnames = list(rownames(input_test_mod1), colnames(input_train_mod2))
  ) %>%
  as("CsparseMatrix")

out <- anndata::AnnData(
  X = pred_expanded,
  uns = list(
    method_id = "babel"
  )
)

cat(">> Write predictions to file\\n")
zzz <- out\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
