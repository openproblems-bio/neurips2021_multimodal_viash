#!/usr/bin/env bash

###################################
#    baseline_linear_knn 1.1.0    #
###################################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Daniel Burkhardt <daniel.b.burkhardt@gmail.com> (author, maintainer) {github: dburkhardt}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "baseline_linear_knn 1.1.0"
  echo "Perform DR with Linear Regression, and match cells with kNN"
  echo
  echo "Options:"

  echo "   --input_train_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod1 profiles."
  echo ""


  echo "   --input_train_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod2 profiles."
  echo ""


  echo "   --input_train_sol"
  echo "        type: file, required parameter"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of train mod1&mod2 profiles."
  echo ""


  echo "   --input_test_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod1 profiles."
  echo ""


  echo "   --input_test_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod2 profiles."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        The predicted pairing of test mod1&mod2 profiles."
  echo ""


  echo "   --n_svd"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Number of SVD components to compress to"
  echo ""


  echo "   --n_neighbors"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Number of neighbors for matching modalities"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "baseline_linear_knn 1.1.0"
            exit
            ;;
        --input_train_mod1)
            VIASH_PAR_INPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --input_train_mod1=*)
            VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_mod2)
            VIASH_PAR_INPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --input_train_mod2=*)
            VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_sol)
            VIASH_PAR_INPUT_TRAIN_SOL="$2"
            shift 2
            ;;
        --input_train_sol=*)
            VIASH_PAR_INPUT_TRAIN_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod1)
            VIASH_PAR_INPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --input_test_mod1=*)
            VIASH_PAR_INPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod2)
            VIASH_PAR_INPUT_TEST_MOD2="$2"
            shift 2
            ;;
        --input_test_mod2=*)
            VIASH_PAR_INPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_svd)
            VIASH_PAR_N_SVD="$2"
            shift 2
            ;;
        --n_svd=*)
            VIASH_PAR_N_SVD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_neighbors)
            VIASH_PAR_N_NEIGHBORS="$2"
            shift 2
            ;;
        --n_neighbors=*)
            VIASH_PAR_N_NEIGHBORS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
  ViashError '--input_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
  ViashError '--input_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_SOL" ]; then
  ViashError '--input_train_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
  ViashError '--input_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD2" ]; then
  ViashError '--input_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_SVD" ]; then
  VIASH_PAR_N_SVD="10"
fi
if [ -z "$VIASH_PAR_N_NEIGHBORS" ]; then
  VIASH_PAR_N_NEIGHBORS="10"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-baseline_linear_knn-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
import logging
import anndata as ad
import scipy.spatial
import scipy.sparse
import numpy as np

from sklearn.decomposition import TruncatedSVD
from sklearn.neighbors import NearestNeighbors
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import normalize
## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_train_mod1': $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD1'"; else echo None; fi ),
  'input_train_mod2': $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD2'"; else echo None; fi ),
  'input_train_sol': $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_SOL+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_SOL'"; else echo None; fi ),
  'input_test_mod1': $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD1'"; else echo None; fi ),
  'input_test_mod2': $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD2'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'n_svd': $( if [ ! -z ${VIASH_PAR_N_SVD+x} ]; then echo "int('$VIASH_PAR_N_SVD')"; else echo None; fi ),
  'n_neighbors': $( if [ ! -z ${VIASH_PAR_N_NEIGHBORS+x} ]; then echo "int('$VIASH_PAR_N_NEIGHBORS')"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH END

logging.basicConfig(level=logging.INFO)

logging.info("Load datasets")
input_train_mod1 = ad.read_h5ad(par["input_train_mod1"])
input_train_mod2 = ad.read_h5ad(par["input_train_mod2"])
input_train_sol = ad.read_h5ad(par["input_train_sol"])
input_test_mod1 = ad.read_h5ad(par["input_test_mod1"])
input_test_mod2 = ad.read_h5ad(par["input_test_mod2"])

# This method runs PCA on each modality individually, then runs linear regression to predict mod2
# from mod1 and finally performs kNN to match modalities

# Sort training data
input_train_mod2_sorted = []
for i, j in np.argwhere(input_train_sol.X == 1):
    input_train_mod2_sorted.append(input_train_mod2.obs_names[j])
input_train_mod2[input_train_mod2_sorted]

# concatenate train and test data
mod1 = ad.concat(
    {
        "train": input_train_mod1,
        "test": input_test_mod1
    },
    index_unique="-",
    label="group"
)
mod2 = ad.concat(
    {
        "train": input_train_mod2,
        "test": input_test_mod2
    },
    index_unique="-",
    label="group"
)

# Create helper views to access the test data later
mod1tr = mod1[mod1.obs["group"] == "train", :]
mod2tr = mod2[mod2.obs["group"] == "train", :]

mod1te = mod1[mod1.obs["group"] == "test", :]
mod2te = mod2[mod2.obs["group"] == "test", :]

logging.info("Running PCA")
n_svd = min(par["n_svd"], mod1.n_obs, mod2.n_obs, mod1.n_vars, mod1.n_vars)

# Use TruncatedSVD for fast decomposition of the data
mod1.obsm["X_pca"] = TruncatedSVD(n_svd).fit_transform(mod1.X)
mod2.obsm["X_pca"] = TruncatedSVD(n_svd).fit_transform(mod2.X)

reg = LinearRegression()

reg.fit(mod1tr.obsm["X_pca"], mod2tr.obsm["X_pca"])
mod2te_pred = reg.predict(mod1te.obsm["X_pca"])

neighbors = NearestNeighbors(n_neighbors=np.min((mod2te.shape[0], par["n_neighbors"])), n_jobs=-1)
neighbors = neighbors.fit(mod2te_pred)

distances, indices = neighbors.kneighbors(mod2te.obsm["X_pca"])

prediction = np.zeros((mod2te.shape[0], mod2te.shape[0]))
for i, neighbors in enumerate(indices):
    prediction[i, neighbors] = 1 / distances[i]

prediction = normalize(prediction, norm="l1")

prediction = scipy.sparse.csr_matrix(prediction)

print("Write prediction output")
prediction = ad.AnnData(
    X=prediction,
    uns={
        "dataset_id": input_train_mod1.uns["dataset_id"],
        "method_id": "baseline_linear_knn"
    }
)
prediction.write_h5ad(par["output"])
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
