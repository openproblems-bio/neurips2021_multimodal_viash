  docker.enabled = true
  docker.runOptions = "-i -v ${baseDir}:${baseDir}"
  process.container = "dataintuitive/viash"
  params {
    baseline_babel_knn__input_train_mod1 = "viash_no_value"
    baseline_babel_knn__input_train_mod2 = "viash_no_value"
    baseline_babel_knn__input_train_sol = "viash_no_value"
    baseline_babel_knn__input_test_mod1 = "viash_no_value"
    baseline_babel_knn__input_test_mod2 = "viash_no_value"
    baseline_babel_knn__output = "viash_no_value"
    baseline_babel_knn__n_dims = "10"
    baseline_babel_knn__n_neigh = "10"
    id = ""
    testScript = ""
    testResources = [  ]
    baseline_babel_knn {
      name = "baseline_babel_knn"
      container = "match_modality_methods_baseline_babel_knn"
      containerTag = "1.3.0"
      containerRegistry = "openproblems"
      command = "baseline_babel_knn"
      tests {
        isDefined = false
        testScript = "NA"
        testResources = [  ]
      }
      arguments {
        input_train_mod1 {
          name = "input_train_mod1"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__input_train_mod1}"
          example = "dataset_censored.h5ad"
          description = "The censored shuffled train mod1 profiles."
        }
        input_train_mod2 {
          name = "input_train_mod2"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__input_train_mod2}"
          example = "dataset_censored.h5ad"
          description = "The censored shuffled train mod2 profiles."
        }
        input_train_sol {
          name = "input_train_sol"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__input_train_sol}"
          example = "dataset_solution.h5ad"
          description = "The pairing of train mod1&mod2 profiles."
        }
        input_test_mod1 {
          name = "input_test_mod1"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__input_test_mod1}"
          example = "dataset_censored.h5ad"
          description = "The censored shuffled test mod1 profiles."
        }
        input_test_mod2 {
          name = "input_test_mod2"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__input_test_mod2}"
          example = "dataset_censored.h5ad"
          description = "The censored shuffled test mod2 profiles."
        }
        output {
          name = "output"
          otype = "--"
          required = true
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__output}"
          example = "output.h5ad"
          description = "The predicted pairing of test mod1&mod2 profiles."
        }
        n_dims {
          name = "n_dims"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__n_dims}"
          dflt = "10"
          description = "Number of dimensions to use for dimensionality reduction."
        }
        n_neigh {
          name = "n_neigh"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.baseline_babel_knn__n_neigh}"
          dflt = "10"
          description = "Number of neighbors for KNN. Match probability will be 1/n_neigh"
        }
      }
    }
  }