#!/usr/bin/env bash

################################
#    pseudotime_order 1.3.0    #
################################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "pseudotime_order 1.3.0"
  echo "Add pseudotime ordering to dataset if none are provided."
  echo
  echo "Options:"

  echo "   --input_rna"
  echo "        type: file, required parameter"
  echo "        example: input.h5ad"
  echo "        Raw dataset in a h5ad file."
  echo ""


  echo "   --input_mod2"
  echo "        type: file, required parameter"
  echo "        example: input.h5ad"
  echo "        Raw dataset in a h5ad file."
  echo ""


  echo "   --output_rna"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Normalized h5ad file."
  echo ""


  echo "   --output_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Normalized h5ad file."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "pseudotime_order 1.3.0"
            exit
            ;;
        --input_rna)
            VIASH_PAR_INPUT_RNA="$2"
            shift 2
            ;;
        --input_rna=*)
            VIASH_PAR_INPUT_RNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_mod2)
            VIASH_PAR_INPUT_MOD2="$2"
            shift 2
            ;;
        --input_mod2=*)
            VIASH_PAR_INPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_rna)
            VIASH_PAR_OUTPUT_RNA="$2"
            shift 2
            ;;
        --output_rna=*)
            VIASH_PAR_OUTPUT_RNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_mod2)
            VIASH_PAR_OUTPUT_MOD2="$2"
            shift 2
            ;;
        --output_mod2=*)
            VIASH_PAR_OUTPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_RNA" ]; then
  ViashError '--input_rna' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MOD2" ]; then
  ViashError '--input_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_RNA" ]; then
  ViashError '--output_rna' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_MOD2" ]; then
  ViashError '--output_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-pseudotime_order-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
library(anndata, warn.conflicts = FALSE, quietly = TRUE)
library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
requireNamespace("SCORPIUS", quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_rna" = $( if [ ! -z ${VIASH_PAR_INPUT_RNA+x} ]; then echo "'$VIASH_PAR_INPUT_RNA'"; else echo NULL; fi ),
  "input_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_MOD2'"; else echo NULL; fi ),
  "output_rna" = $( if [ ! -z ${VIASH_PAR_OUTPUT_RNA+x} ]; then echo "'$VIASH_PAR_OUTPUT_RNA'"; else echo NULL; fi ),
  "output_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_MOD2'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

cat("Reading h5ad file\\n")
ad_rna <- anndata::read_h5ad(par\$input_rna)
ad_mod2 <- anndata::read_h5ad(par\$input_mod2)

obs_col_mod1 <- "pseudotime_order_GEX" # paste0("pseudotime_order_", unique(ad_mod1\$var[["feature_types"]]))
obs_col_mod2 <- paste0("pseudotime_order_", unique(ad_mod2\$var[["feature_types"]]))

if (!obs_col_mod1 %in% colnames(ad_rna\$obs)) {
  cat("Computing pseudotime ordering for mod1\\n")
  dr_rna <- SCORPIUS::reduce_dimensionality(as(ad_rna\$X, "CsparseMatrix"))
  pt_rna <- SCORPIUS::infer_trajectory(dr_rna)\$time
  ad_rna\$obs[[obs_col_mod1]] <- pt_rna
  ad_mod2\$obs[[obs_col_mod1]] <- pt_rna
}
if (!obs_col_mod2 %in% colnames(ad_mod2\$obs)) {
  cat("Computing pseudotime ordering for mod2\\n")
  dr_mod2 <- SCORPIUS::reduce_dimensionality(as(ad_mod2\$X, "CsparseMatrix"))
  pt_mod2 <- SCORPIUS::infer_trajectory(dr_mod2)\$time
  ad_rna\$obs[[obs_col_mod2]] <- pt_mod2
  ad_mod2\$obs[[obs_col_mod2]] <- pt_mod2
}

cat("Writing mod1 data\\n")
zzz <- ad_rna\$write_h5ad(par\$output_rna, compression = "gzip")

cat("Writing mod2 data\\n")
zzz <- ad_mod2\$write_h5ad(par\$output_mod2, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
