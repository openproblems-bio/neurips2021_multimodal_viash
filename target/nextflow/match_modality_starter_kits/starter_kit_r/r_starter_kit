#!/usr/bin/env bash

#############################
#    r_starter_kit 1.1.1    #
#############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * John Doe <johndoe@youremailprovider.com> (author, maintainer) {github: johndoe, orcid: 0000-1111-2222-3333}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "r_starter_kit 1.1.1"
  echo "A description for your method."
  echo
  echo "Options:"

  echo "   --input_train_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod1 profiles."
  echo ""


  echo "   --input_train_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod2 profiles."
  echo ""


  echo "   --input_train_sol"
  echo "        type: file, required parameter"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of train mod1&mod2 profiles."
  echo ""


  echo "   --input_test_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod1 profiles."
  echo ""


  echo "   --input_test_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod2 profiles."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        The predicted pairing of test mod1&mod2 profiles."
  echo ""


  echo "   --n_neighbors"
  echo "        type: integer"
  echo "        default: 5"
  echo "        Number of neighbors to use."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "r_starter_kit 1.1.1"
            exit
            ;;
        --input_train_mod1)
            VIASH_PAR_INPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --input_train_mod1=*)
            VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_mod2)
            VIASH_PAR_INPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --input_train_mod2=*)
            VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_sol)
            VIASH_PAR_INPUT_TRAIN_SOL="$2"
            shift 2
            ;;
        --input_train_sol=*)
            VIASH_PAR_INPUT_TRAIN_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod1)
            VIASH_PAR_INPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --input_test_mod1=*)
            VIASH_PAR_INPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod2)
            VIASH_PAR_INPUT_TEST_MOD2="$2"
            shift 2
            ;;
        --input_test_mod2=*)
            VIASH_PAR_INPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_neighbors)
            VIASH_PAR_N_NEIGHBORS="$2"
            shift 2
            ;;
        --n_neighbors=*)
            VIASH_PAR_N_NEIGHBORS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
  ViashError '--input_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
  ViashError '--input_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_SOL" ]; then
  ViashError '--input_train_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
  ViashError '--input_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD2" ]; then
  ViashError '--input_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_NEIGHBORS" ]; then
  VIASH_PAR_N_NEIGHBORS="5"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-r_starter_kit-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# Dependencies:
#   python: anndata
#   r: anndata, lmds, FNN
#
# R starter kit for the NeurIPS 2021 Single-Cell Competition.
# Parts with \`TODO\` are supposed to be changed by you.
#
# More documentation:
#
# https://viash.io/docs/creating_components/r/

cat("Loading dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
requireNamespace("anndata", quietly = TRUE)
requireNamespace("lmds", quietly = TRUE)
requireNamespace("FNN", quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_train_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD1'"; else echo NULL; fi ),
  "input_train_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD2'"; else echo NULL; fi ),
  "input_train_sol" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_SOL+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_SOL'"; else echo NULL; fi ),
  "input_test_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD1'"; else echo NULL; fi ),
  "input_test_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD2'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi ),
  "n_neighbors" = $( if [ ! -z ${VIASH_PAR_N_NEIGHBORS+x} ]; then echo "as.integer($VIASH_PAR_N_NEIGHBORS)"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

method_id <- "r_starter_kit" # fill in the name of your method here

# TODO: implement own method

# This starter kit is split up into several steps.
# * compute dimensionality reduction on [train_mod1, test_mod1] data
# * compute dimensionality reduction on [train_mod2, test_mod2] data
# * predict test_dr2 from [train_dr1, train_dr2, test_dr1]
# * calculate k nearest neighbors between test_dr2 and predicted pred_dr2
# * transform k nearest neighbors into a pairing matrix

cat("read train solution\\n")
input_train_sol <- anndata::read_h5ad(par\$input_train_sol)
match_train <- input_train_sol\$uns\$pairing_ix + 1
rm(input_train_sol)
gc()

cat("compute dimensionality reduction on [train_mod1, test_mod1] data\\n")
input_train_mod1 <- anndata::read_h5ad(par\$input_train_mod1)
input_test_mod1 <- anndata::read_h5ad(par\$input_test_mod1)
dr_mod1 <- lmds::lmds(
  rbind(input_train_mod1\$X, input_test_mod1\$X),
  ndim = 10,
  distance_method = "pearson"
)
train_mod1_uns <- input_train_mod1\$uns

# clear memory
rm(input_train_mod1, input_test_mod1)
gc()

cat("compute dimensionality reduction on [train_mod2, test_mod2] data\\n")
input_train_mod2 <- anndata::read_h5ad(par\$input_train_mod2)
input_test_mod2 <- anndata::read_h5ad(par\$input_test_mod2)

dr_mod2 <- lmds::lmds(
  rbind(input_train_mod2\$X[order(match_train), , drop = FALSE], input_test_mod2\$X),
  ndim = 10,
  distance_method = "pearson"
)
# clear memory
rm(input_train_mod2, input_test_mod2)
gc()

# split DR matrices
dr_mod1_train <- dr_mod1[seq_along(match_train), , drop = FALSE]
dr_mod2_train <- dr_mod2[seq_along(match_train), , drop = FALSE]
dr_mod1_test <- dr_mod1[-seq_along(match_train), , drop = FALSE]
dr_mod2_test <- dr_mod2[-seq_along(match_train), , drop = FALSE]


cat("predict test_dr2 from [train_dr1, train_dr2, test_dr1]\\n")
dr_mod2_test_pred <- apply(dr_mod2_train, 2, function(yi) {
  FNN::knn.reg(
    train = dr_mod1_train,
    test = dr_mod1_test,
    y = yi,
    k = min(15, nrow(dr_mod1_test))
  )\$pred
})

cat("calculate k nearest neighbors between test_dr2 and predicted pred_dr2\\n")
knn_out <- FNN::get.knnx(
  dr_mod2_test_pred,
  dr_mod2_test,
  k = min(par\$n_neighbors, nrow(dr_mod1_test))
)

cat("transform k nearest neighbors into a pairing matrix\\n")
df <- tibble(
  i = as.vector(row(knn_out\$nn.index)),
  j = as.vector(knn_out\$nn.index),
  x = max(knn_out\$nn.dist) * 2 - as.vector(knn_out\$nn.dist)
)
knn_mat <- Matrix::sparseMatrix(
  i = df\$i,
  j = df\$j,
  x = df\$x,
  dims = list(nrow(dr_mod1_test), nrow(dr_mod2_test))
)

# normalise to make rows sum to 1
rs <- Matrix::rowSums(knn_mat)
knn_mat@x <- knn_mat@x / rs[knn_mat@i + 1]

cat("creating output anndata\\n")
out <- anndata::AnnData(
  X = as(knn_mat, "CsparseMatrix"),
  uns = list(
    dataset_id = train_mod1_uns[["dataset_id"]],
    method_id = method_id
  )
)

cat("writing predictions to file\\n")
zzz <- out\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
