#!/usr/bin/env bash

#############################
#    visualization 1.1.0    #
#############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Michaela Mueller <mumichae@in.tum.de> (author, maintainer) {github: mumichae, orcid: 0000-0002-1401-1785}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "visualization 1.1.0"
  echo "Visualize joint embedding"
  echo
  echo "Options:"

  echo "   --input_prediction"
  echo "        type: file, required parameter"
  echo "        example: prediction.h5ad"
  echo "        Predicted joint embedding."
  echo ""


  echo "   --input_solution"
  echo "        type: file, required parameter"
  echo "        example: solution.h5ad"
  echo "        Ground truth dataset."
  echo ""


  echo "   --output_umap"
  echo "        type: file, required parameter, output"
  echo "        example: umap.png"
  echo "        UMAP visualisation of joint embedding."
  echo ""


  echo "   --output_emb"
  echo "        type: file, required parameter, output"
  echo "        example: emb.png"
  echo "        Scatterplot of first 2 dimensions of the joint embedding."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "visualization 1.1.0"
            exit
            ;;
        --input_prediction)
            VIASH_PAR_INPUT_PREDICTION="$2"
            shift 2
            ;;
        --input_prediction=*)
            VIASH_PAR_INPUT_PREDICTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_solution)
            VIASH_PAR_INPUT_SOLUTION="$2"
            shift 2
            ;;
        --input_solution=*)
            VIASH_PAR_INPUT_SOLUTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_umap)
            VIASH_PAR_OUTPUT_UMAP="$2"
            shift 2
            ;;
        --output_umap=*)
            VIASH_PAR_OUTPUT_UMAP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_emb)
            VIASH_PAR_OUTPUT_EMB="$2"
            shift 2
            ;;
        --output_emb=*)
            VIASH_PAR_OUTPUT_EMB=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
  ViashError '--input_prediction' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
  ViashError '--input_solution' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_UMAP" ]; then
  ViashError '--output_umap' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_EMB" ]; then
  ViashError '--output_emb' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-visualization-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
import logging
import anndata as ad
import scanpy as sc
from matplotlib import pyplot as plt

logging.basicConfig(level=logging.INFO)

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_prediction': $( if [ ! -z ${VIASH_PAR_INPUT_PREDICTION+x} ]; then echo "'$VIASH_PAR_INPUT_PREDICTION'"; else echo None; fi ),
  'input_solution': $( if [ ! -z ${VIASH_PAR_INPUT_SOLUTION+x} ]; then echo "'$VIASH_PAR_INPUT_SOLUTION'"; else echo None; fi ),
  'output_umap': $( if [ ! -z ${VIASH_PAR_OUTPUT_UMAP+x} ]; then echo "'$VIASH_PAR_OUTPUT_UMAP'"; else echo None; fi ),
  'output_emb': $( if [ ! -z ${VIASH_PAR_OUTPUT_EMB+x} ]; then echo "'$VIASH_PAR_OUTPUT_EMB'"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH END

logging.info('Reading \`h5ad\` files...')
adata = ad.read_h5ad(par['input_prediction'])
adata_solution = ad.read_h5ad(par['input_solution'])

logging.info('Annotating...')
adata.obsm['X_emb'] = adata.X
adata.obs['batch'] = adata_solution.obs['batch'][adata.obs_names]
adata.obs['cell_type'] = adata_solution.obs['cell_type'][adata.obs_names]

logging.info('Nearest neighbours...')
sc.pp.neighbors(adata, use_rep='X_emb')

logging.info('UMAP...')
sc.tl.umap(adata)

logging.info('Plotting...')
# UMAP
sc.pl.umap(adata, color=['batch', 'cell_type'], show=False)
plt.savefig(par['output_umap'])

# Embedding
sc.pl.embedding(adata, basis='X_emb', color=['batch', 'cell_type'])
plt.savefig(par['output_emb'])

# adata.obs['Emb_1'] = adata.X[:, 1]
# adata.obs['Emb_2'] = adata.X[:, 2]
# fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
#
# sc.pl.scatter(adata, x='Emb_1', y='Emb_2', color='batch', show=False, ax=ax1)
# sc.pl.scatter(adata, x='Emb_1', y='Emb_2', color='cell_type', show=False, ax=ax2)
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
