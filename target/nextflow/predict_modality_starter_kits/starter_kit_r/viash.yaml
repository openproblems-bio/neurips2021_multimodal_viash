functionality:
  name: "r_starter_kit"
  namespace: "predict_modality_starter_kits"
  version: "main_build"
  authors:
  - name: "John Doe"
    email: "johndoe@youremailprovider.com"
    roles:
    - "author"
    - "maintainer"
    props:
      github: "johndoe"
      orcid: "0000-1111-2222-3333"
  arguments:
  - type: "file"
    name: "--input_train_mod1"
    alternatives: []
    description: "Censored dataset, training cells."
    example: "dataset_mod1.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_test_mod1"
    alternatives: []
    description: "Censored dataset, test cells."
    example: "dataset_mod1.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_train_mod2"
    alternatives: []
    description: "Censored dataset."
    example: "dataset_mod2.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Dataset with predicted values for modality2."
    example: "output.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--distance_method"
    alternatives: []
    description: "The distance method to use. Possible values are euclidean, pearson,\
      \ spearman and others."
    default: "spearman"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_pcs"
    alternatives: []
    description: "Number of principal components to use."
    default: 50
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_neighbors"
    alternatives: []
    description: "Number of neighbors to use."
    default: 20
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ##################################
      #    r_starter_kit main_build    #
      ##################################
      
      # This wrapper script is auto-generated by viash 0.5.3 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * John Doe <johndoe@youremailprovider.com> (author, maintainer) {github: johndoe, orcid: 0000-1111-2222-3333}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="r_starter_kit"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "r_starter_kit main_build"
        echo "A description for your method."
        echo
        echo "Options:"
      
        echo "   --input_train_mod1"
        echo "        type: file, required parameter"
        echo "        example: dataset_mod1.h5ad"
        echo "        Censored dataset, training cells."
        echo ""
      
      
        echo "   --input_test_mod1"
        echo "        type: file, required parameter"
        echo "        example: dataset_mod1.h5ad"
        echo "        Censored dataset, test cells."
        echo ""
      
      
        echo "   --input_train_mod2"
        echo "        type: file, required parameter"
        echo "        example: dataset_mod2.h5ad"
        echo "        Censored dataset."
        echo ""
      
      
        echo "   --output"
        echo "        type: file, required parameter, output"
        echo "        example: output.h5ad"
        echo "        Dataset with predicted values for modality2."
        echo ""
      
      
        echo "   --distance_method"
        echo "        type: string"
        echo "        default: spearman"
        echo "        The distance method to use. Possible values are euclidean, pearson, spearman and others."
        echo ""
      
      
        echo "   --n_pcs"
        echo "        type: integer"
        echo "        default: 50"
        echo "        Number of principal components to use."
        echo ""
      
      
        echo "   --n_neighbors"
        echo "        type: integer"
        echo "        default: 20"
        echo "        Number of neighbors to use."
        echo ""
      
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "r_starter_kit main_build"
                  exit
                  ;;
              --input_train_mod1)
                  VIASH_PAR_INPUT_TRAIN_MOD1="$2"
                  shift 2
                  ;;
              --input_train_mod1=*)
                  VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_test_mod1)
                  VIASH_PAR_INPUT_TEST_MOD1="$2"
                  shift 2
                  ;;
              --input_test_mod1=*)
                  VIASH_PAR_INPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_train_mod2)
                  VIASH_PAR_INPUT_TRAIN_MOD2="$2"
                  shift 2
                  ;;
              --input_train_mod2=*)
                  VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --distance_method)
                  VIASH_PAR_DISTANCE_METHOD="$2"
                  shift 2
                  ;;
              --distance_method=*)
                  VIASH_PAR_DISTANCE_METHOD=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_pcs)
                  VIASH_PAR_N_PCS="$2"
                  shift 2
                  ;;
              --n_pcs=*)
                  VIASH_PAR_N_PCS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_neighbors)
                  VIASH_PAR_N_NEIGHBORS="$2"
                  shift 2
                  ;;
              --n_neighbors=*)
                  VIASH_PAR_N_NEIGHBORS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
        ViashError '--input_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
        ViashError '--input_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
        ViashError '--input_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_DISTANCE_METHOD" ]; then
        VIASH_PAR_DISTANCE_METHOD="spearman"
      fi
      if [ -z "$VIASH_PAR_N_PCS" ]; then
        VIASH_PAR_N_PCS="50"
      fi
      if [ -z "$VIASH_PAR_N_NEIGHBORS" ]; then
        VIASH_PAR_N_NEIGHBORS="20"
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-r_starter_kit-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      # Dependencies:
      #   python: anndata
      #   r: anndata, lmds, FNN
      #
      # R starter kit for the NeurIPS 2021 Single-Cell Competition.
      # Parts with \`TODO\` are supposed to be changed by you.
      #
      # More documentation:
      #
      # https://viash.io/docs/creating_components/r/
      
      cat("Loading dependencies\\n")
      library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
      requireNamespace("dplyr", quietly = TRUE)
      requireNamespace("anndata", quietly = TRUE)
      requireNamespace("lmds", quietly = TRUE)
      requireNamespace("FNN", quietly = TRUE)
      requireNamespace("pbapply", quietly = TRUE)
      
      n_cores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      # get parameters from cli
      par <- list(
        "input_train_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD1'"; else echo NULL; fi ),
        "input_test_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD1'"; else echo NULL; fi ),
        "input_train_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD2'"; else echo NULL; fi ),
        "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi ),
        "distance_method" = $( if [ ! -z ${VIASH_PAR_DISTANCE_METHOD+x} ]; then echo "'$VIASH_PAR_DISTANCE_METHOD'"; else echo NULL; fi ),
        "n_pcs" = $( if [ ! -z ${VIASH_PAR_N_PCS+x} ]; then echo "as.integer($VIASH_PAR_N_PCS)"; else echo NULL; fi ),
        "n_neighbors" = $( if [ ! -z ${VIASH_PAR_N_NEIGHBORS+x} ]; then echo "as.integer($VIASH_PAR_N_NEIGHBORS)"; else echo NULL; fi )
      )
      
      # get meta parameters
      meta <- list(
        functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
        resources_dir = "$VIASH_RESOURCES_DIR"
      )
      
      # get resources dir
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      ## VIASH END
      
      method_id <- "r_starter_kit" # fill in the name of your method here
      
      cat("Reading mod1 h5ad files\\n")
      input_train_mod1 <- anndata::read_h5ad(par\$input_train_mod1)
      train_mod1_uns <- input_train_mod1\$uns
      
      # subset to HVG to reduce memory consumption
      train_mod1_sd <- proxyC::colSds(input_train_mod1\$X)
      ix <- order(train_mod1_sd, decreasing = TRUE)[seq_len(min(1000, length(train_mod1_sd)))]
      input_train_mod1 <- input_train_mod1[,ix]\$copy()
      gc()
      
      # subset to HVG to reduce memory consumption
      input_test_mod1 <- anndata::read_h5ad(par\$input_test_mod1)
      input_test_mod1 <- input_test_mod1[,ix]\$copy()
      gc()
      
      cat("Performing DR on the mod1 values\\n")
      # LMDS is more efficient than regular MDS because
      # it does not compure a square distance matrix.
      dr_mod1 <- lmds::lmds(
        rbind(input_train_mod1\$X, input_test_mod1\$X),
        ndim = par\$n_pcs,
        distance_method = par\$distance_method
      )
      
      ix <- seq_len(nrow(input_train_mod1))
      dr_mod1_train <- dr_mod1[ix, , drop = FALSE]
      dr_mod1_test <- dr_mod1[-ix, , drop = FALSE]
      
      # remove previous objects to save memory
      rm(input_train_mod1, input_test_mod1)
      gc()
      
      cat("Reading mod2 h5ad files\\n")
      input_train_mod2 <- anndata::read_h5ad(par\$input_train_mod2)
      
      cat("Predicting for each column in modality 2\\n")
      # precompute knn indices
      knn_ix <- FNN::get.knnx(
        dr_mod1_train,
        dr_mod1_test,
        k = par\$n_neighbors
      )\$nn.index
      
      # perform knn regression.
      pred <- input_train_mod2\$X[knn_ix[, 1], , drop = FALSE]
      if (par\$n_neighbors > 1) {
        for (k in seq(2, par\$n_neighbors)) {
          pred <- pred + input_train_mod2\$X[knn_ix[, k], , drop = FALSE]
        }
      }
      pred <- pred / par\$n_neighbors
      rownames(pred) <- rownames(dr_mod1_test)
      
      cat("Creating outputs object\\n")
      # store prediction as a sparse matrix
      out <- anndata::AnnData(
        X = pred,
        uns = list(
          dataset_id = train_mod1_uns[["dataset_id"]],
          method_id = method_id
        )
      )
      
      cat("Writing predictions to file\\n")
      zzz <- out\$write_h5ad(par\$output, compression = "gzip")
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      Rscript "\$tempscript"
      
      VIASHEOF
      

    dest: "r_starter_kit"
    is_executable: true
  - type: "file"
    text: |
        docker.enabled = true
        def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
        docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
        process.container = "dataintuitive/viash"
        params {
          r_starter_kit__input_train_mod1 = "viash_no_value"
          r_starter_kit__input_test_mod1 = "viash_no_value"
          r_starter_kit__input_train_mod2 = "viash_no_value"
          r_starter_kit__output = "viash_no_value"
          r_starter_kit__distance_method = "spearman"
          r_starter_kit__n_pcs = "50"
          r_starter_kit__n_neighbors = "20"
          id = ""
          testScript = "test.R"
          testResources = [ "test.R", "sample_data" ]
          r_starter_kit {
            name = "r_starter_kit"
            container = "predict_modality_starter_kits_r_starter_kit"
            containerTag = "main_build"
            containerRegistry = "openproblems"
            command = "r_starter_kit"
            tests {
              isDefined = true
              testScript = "test.R"
              testResources = [ "test.R", "sample_data" ]
            }
            arguments {
              input_train_mod1 {
                name = "input_train_mod1"
                otype = "--"
                required = true
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__input_train_mod1}"
                example = "dataset_mod1.h5ad"
                description = "Censored dataset, training cells."
              }
              input_test_mod1 {
                name = "input_test_mod1"
                otype = "--"
                required = true
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__input_test_mod1}"
                example = "dataset_mod1.h5ad"
                description = "Censored dataset, test cells."
              }
              input_train_mod2 {
                name = "input_train_mod2"
                otype = "--"
                required = true
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__input_train_mod2}"
                example = "dataset_mod2.h5ad"
                description = "Censored dataset."
              }
              output {
                name = "output"
                otype = "--"
                required = true
                type = "file"
                direction = "Output"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__output}"
                example = "output.h5ad"
                description = "Dataset with predicted values for modality2."
              }
              distance_method {
                name = "distance_method"
                otype = "--"
                required = false
                type = "string"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__distance_method}"
                dflt = "spearman"
                description = "The distance method to use. Possible values are euclidean, pearson, spearman and others."
              }
              n_pcs {
                name = "n_pcs"
                otype = "--"
                required = false
                type = "integer"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__n_pcs}"
                dflt = "50"
                description = "Number of principal components to use."
              }
              n_neighbors {
                name = "n_neighbors"
                otype = "--"
                required = false
                type = "integer"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.r_starter_kit__n_neighbors}"
                dflt = "20"
                description = "Number of neighbors to use."
              }
            }
          }
        }

    dest: "nextflow.config"
  - type: "file"
    text: |
      nextflow.enable.dsl=2
      
      params.test = false
      params.debug = false
      params.publishDir = "./"
      
      // A function to verify (at runtime) if all required arguments are effectively provided.
      def checkParams(_params) {
        _params.arguments.collect{
          if (it.value == "viash_no_value") {
            println("[ERROR] option --${it.name} not specified in component r_starter_kit")
            println("exiting now...")
              exit 1
          }
        }
      }
      
      
      def escape(str) {
        return str.replaceAll('\\\\', '\\\\\\\\').replaceAll("\"", "\\\\\"").replaceAll("\n", "\\\\n").replaceAll("`", "\\\\`")
      }
      
      def renderArg(it) {
        if (it.otype == "") {
          return "'" + escape(it.value) + "'"
        } else if (it.type == "boolean_true") {
          if (it.value.toLowerCase() == "true") {
            return it.otype + it.name
          } else {
            return ""
          }
        } else if (it.type == "boolean_false") {
          if (it.value.toLowerCase() == "true") {
            return ""
          } else {
            return it.otype + it.name
          }
        } else if (it.value == "no_default_value_configured") {
          return ""
        } else {
          def retVal = it.value in List && it.multiple ? it.value.join(it.multiple_sep): it.value
          return it.otype + it.name + " '" + escape(retVal) + "'"
        }
      }
      
      def renderCLI(command, arguments) {
        def argumentsList = arguments.collect{renderArg(it)}.findAll{it != ""}
      
        def command_line = command + argumentsList
      
        return command_line.join(" ")
      }
      
      def effectiveContainer(processParams) {
        def _registry = params.containsKey("containerRegistry") ? params.containerRegistry : processParams.containerRegistry
        def _name = processParams.container
        def _tag = params.containsKey("containerTag") ? params.containerTag : processParams.containerTag
      
        return (_registry == "" ? "" : _registry + "/") + _name + ":" + _tag
      }
      
      // Convert the nextflow.config arguments list to a List instead of a LinkedHashMap
      // The rest of this main.nf script uses the Map form
      def argumentsAsList(_params) {
        def overrideArgs = _params.arguments.collect{ key, value -> value }
        def newParams = _params + [ "arguments" : overrideArgs ]
        return newParams
      }
      
      
      // Use the params map, create a hashmap of the filenames for output
      // output filename is <sample>.<method>.<arg_name>[.extension]
      def outFromIn(_params) {
      
        def id = _params.id
      
        _params
          .arguments
          .findAll{ it -> it.type == "file" && it.direction == "Output" }
          .collect{ it ->
            // If an 'example' attribute is present, strip the extension from the filename,
            // If a 'dflt' attribute is present, strip the extension from the filename,
            // Otherwise just use the option name as an extension.
            def extOrName =
              (it.example != null)
                ? it.example.split(/\./).last()
                : (it.dflt != null)
                  ? it.dflt.split(/\./).last()
                  : it.name
            // The output filename is <sample> . <modulename> . <extension>
            // Unless the output argument is explicitly specified on the CLI
            def newValue =
              (it.value == "viash_no_value")
                ? "r_starter_kit." + it.name + "." + extOrName
                : it.value
            def newName =
              (id != "")
                ? id + "." + newValue
                : it.name + newValue
            it + [ value : newName ]
          }
      
      }
      
      // A process that filters out output from the output Map
      process filterOutput {
      
        input:
          tuple val(id), val(input), val(_params)
        output:
          tuple val(id), val(output), val(_params)
        when:
          input.keySet().contains("output")
        exec:
          output = input["output"]
      
      }
      
      def overrideIO(_params, inputs, outputs) {
      
        // `inputs` in fact can be one of:
        // - `String`,
        // - `List[String]`,
        // - `Map[String, String | List[String]]`
        // Please refer to the docs for more info
        def overrideArgs = _params.arguments.collect{ it ->
          if (it.type == "file") {
            if (it.direction == "Input") {
              (inputs in List || inputs in HashMap)
                ? (inputs in List)
                  ? it + [ "value" : inputs.join(it.multiple_sep)]
                  : (inputs[it.name] != null)
                    ? (inputs[it.name] in List)
                      ? it + [ "value" : inputs[it.name].join(it.multiple_sep)]
                      : it + [ "value" : inputs[it.name]]
                    : it
                : it + [ "value" : inputs ]
            } else {
              (outputs in List || outputs in HashMap)
                ? (outputs in List)
                  ? it + [ "value" : outputs.join(it.multiple_sep)]
                  : (outputs[it.name] != null)
                    ? (outputs[it.name] in List)
                      ? it + [ "value" : outputs[it.name].join(it.multiple_sep)]
                      : it + [ "value" : outputs[it.name]]
                    : it
                : it + [ "value" : outputs ]
            }
          } else {
            it
          }
        }
      
        def newParams = _params + [ "arguments" : overrideArgs ]
      
        return newParams
      
      }
      
      process r_starter_kit_process {
        label 'lowmem'
        label 'lowtime'
        label 'lowcpu'
        tag "${id}"
        echo { (params.debug == true) ? true : false }
        cache 'deep'
        stageInMode "symlink"
        container "${container}"
      
        input:
          tuple val(id), path(input), val(output), val(container), val(cli), val(_params)
        output:
          tuple val("${id}"), path(output), val(_params)
        stub:
          """
          # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
          export PATH="${moduleDir}:\$PATH"
          STUB=1 $cli
          """
        script:
          def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
          if (params.test)
            """
            # Some useful stuff
            export NUMBA_CACHE_DIR=/tmp/numba-cache
            # Running the pre-hook when necessary
            # Pass viash temp dir
            export VIASH_TEMP="${viash_temp}"
            # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
            export PATH="./:${moduleDir}:\$PATH"
            ./${params.r_starter_kit.tests.testScript} | tee $output
            """
          else
            """
            # Some useful stuff
            export NUMBA_CACHE_DIR=/tmp/numba-cache
            # Running the pre-hook when necessary
            # Pass viash temp dir
            export VIASH_TEMP="${viash_temp}"
            # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
            export PATH="${moduleDir}:\$PATH"
            $cli
            """
      }
      
      workflow r_starter_kit {
      
        take:
        id_input_params_
      
        main:
      
        def key = "r_starter_kit"
      
        def id_input_output_function_cli_params_ =
          id_input_params_.map{ id, input, _params ->
      
            // Start from the (global) params and overwrite with the (local) _params
            def defaultParams = params[key] ? params[key] : [:]
            def overrideParams = _params[key] ? _params[key] : [:]
            def updtParams = defaultParams + overrideParams
            // Convert to List[Map] for the arguments
            def newParams = argumentsAsList(updtParams) + [ "id" : id ]
      
            // Generate output filenames, out comes a Map
            def output = outFromIn(newParams)
      
            // The process expects Path or List[Path], Maps need to be converted
            def inputsForProcess =
              (input in HashMap)
                ? input.collect{ k, v -> v }.flatten()
                : input
            def outputsForProcess = output.collect{ it.value }
      
            // For our machinery, we convert Path -> String in the input
            def inputs =
              (input in List || input in HashMap)
                ? (input in List)
                  ? input.collect{ it.name }
                  : input.collectEntries{ k, v -> [ k, (v in List) ? v.collect{it.name} : v.name ] }
                : input.name
            outputs = output.collectEntries{ [(it.name): it.value] }
      
            def finalParams = overrideIO(newParams, inputs, outputs)
      
            checkParams(finalParams)
      
            new Tuple6(
              id,
              inputsForProcess,
              outputsForProcess,
              effectiveContainer(finalParams),
              renderCLI([finalParams.command], finalParams.arguments),
              finalParams
            )
          }
      
        result_ = r_starter_kit_process(id_input_output_function_cli_params_)
          | join(id_input_params_)
          | map{ id, output, _params, input, original_params ->
              def parsedOutput = _params.arguments
                .findAll{ it.type == "file" && it.direction == "Output" }
                .withIndex()
                .collectEntries{ it, i ->
                  // with one entry, output is of type Path and array selections
                  // would select just one element from the path
                  [(it.name): (output in List) ? output[i] : output ]
                }
              new Tuple3(id, parsedOutput, original_params)
            }
      
        result_
           | filter { it[1].keySet().size() > 1 }
           | view{">> Be careful, multiple outputs from this component!"}
      
        emit:
        result_.flatMap{ it ->
          (it[1].keySet().size() > 1)
            ? it[1].collect{ k, el -> [ it[0], [ (k): el ], it[2] ] }
            : it[1].collect{ k, el -> [ it[0], el, it[2] ] }
        }
      }
      
      workflow {
        def id = params.id
        def fname = "r_starter_kit"
      
        def _params = params
      
        // could be refactored to be FP
        for (entry in params[fname].arguments) {
          def name = entry.value.name
          if (params[name] != null) {
            params[fname].arguments[name].value = params[name]
          }
        }
      
        def inputFiles = params.r_starter_kit
          .arguments
          .findAll{ key, par -> par.type == "file" && par.direction == "Input" }
          .collectEntries{ key, par -> [(par.name): file(params[fname].arguments[par.name].value) ] }
      
        def ch_ = Channel.from("").map{ s -> new Tuple3(id, inputFiles, params)}
      
        result = r_starter_kit(ch_)
        result.view{ it[1] }
      }
      
      // This workflow is not production-ready yet, we leave it in for future dev
      // TODO
      workflow test {
      
        take:
        rootDir
      
        main:
        params.test = true
        params.r_starter_kit.output = "r_starter_kit.log"
      
        Channel.from(rootDir) \
          | filter { params.r_starter_kit.tests.isDefined } \
          | map{ p -> new Tuple3(
              "tests",
              params.r_starter_kit.tests.testResources.collect{ file( p + it ) },
              params
          )} \
          | r_starter_kit
      
        emit:
        r_starter_kit.out
      }

    dest: "main.nf"
  description: "A description for your method."
  tests:
  - type: "r_script"
    path: "test.R"
    is_executable: true
  - type: "file"
    path: "sample_data"
  info: {}
platform:
  type: "nextflow"
  id: "nextflow"
  registry: "openproblems"
  namespace_separator: "_"
  separate_multiple_outputs: true
  labels:
  - "lowmem"
  - "lowtime"
  - "lowcpu"
platforms: []
info:
  config: "src/predict_modality/starter_kit/starter_kit_r/config.vsh.yaml"
  platform: "nextflow"
  output: "target/nextflow/predict_modality_starter_kits/starter_kit_r"
  executable: "target/nextflow/predict_modality_starter_kits/starter_kit_r/r_starter_kit"
  viash_version: "0.5.3"
  git_commit: "257fabda51c9e699f6de11f369f18b12368f9c64"
  git_remote: "https://github.com/openproblems-bio/neurips2021_multimodal_viash"
