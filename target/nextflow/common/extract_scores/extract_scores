#!/usr/bin/env bash

##############################
#    extract_scores 1.2.0    #
##############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "extract_scores 1.2.0"
  echo "Extract metric scores from evaluated predictions."
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input.h5ad"
  echo "        Input h5ad files containing metadata and metrics in adata.uns."
  echo ""


  echo "   --method_meta"
  echo "        type: file, multiple values allowed"
  echo "        example: method_meta.tsv"
  echo "        A method metadata file. Must contain column 'method_id'."
  echo ""


  echo "   --dataset_meta"
  echo "        type: file, multiple values allowed"
  echo "        example: dataset_meta.tsv"
  echo "        A dataset metadata file. Must contain column 'dataset_id'."
  echo ""


  echo "   --metric_meta"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: metric_meta.tsv"
  echo "        A metric metadata file containing the default value of each metric in case a method errored on a particular dataset. Must contain column 'metric_id' and 'metric_value'."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.tsv"
  echo "        Output tsv"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "extract_scores 1.2.0"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --method_meta)
            if [ -z "$VIASH_PAR_METHOD_META" ]; then
              VIASH_PAR_METHOD_META="$2"
            else
              VIASH_PAR_METHOD_META="$VIASH_PAR_METHOD_META:""$2"
            fi
            shift 2
            ;;
        --method_meta=*)
            if [ -z "$VIASH_PAR_METHOD_META" ]; then
              VIASH_PAR_METHOD_META=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METHOD_META="$VIASH_PAR_METHOD_META:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --dataset_meta)
            if [ -z "$VIASH_PAR_DATASET_META" ]; then
              VIASH_PAR_DATASET_META="$2"
            else
              VIASH_PAR_DATASET_META="$VIASH_PAR_DATASET_META:""$2"
            fi
            shift 2
            ;;
        --dataset_meta=*)
            if [ -z "$VIASH_PAR_DATASET_META" ]; then
              VIASH_PAR_DATASET_META=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_DATASET_META="$VIASH_PAR_DATASET_META:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --metric_meta)
            if [ -z "$VIASH_PAR_METRIC_META" ]; then
              VIASH_PAR_METRIC_META="$2"
            else
              VIASH_PAR_METRIC_META="$VIASH_PAR_METRIC_META:""$2"
            fi
            shift 2
            ;;
        --metric_meta=*)
            if [ -z "$VIASH_PAR_METRIC_META" ]; then
              VIASH_PAR_METRIC_META=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METRIC_META="$VIASH_PAR_METRIC_META:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_METRIC_META" ]; then
  ViashError '--metric_meta' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-extract_scores-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
library(anndata, warn.conflicts = FALSE)
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(testthat, warn.conflicts = FALSE, quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "strsplit('$VIASH_PAR_INPUT', split = ':')[[1]]"; else echo NULL; fi ),
  "method_meta" = $( if [ ! -z ${VIASH_PAR_METHOD_META+x} ]; then echo "strsplit('$VIASH_PAR_METHOD_META', split = ':')[[1]]"; else echo NULL; fi ),
  "dataset_meta" = $( if [ ! -z ${VIASH_PAR_DATASET_META+x} ]; then echo "strsplit('$VIASH_PAR_DATASET_META', split = ':')[[1]]"; else echo NULL; fi ),
  "metric_meta" = $( if [ ! -z ${VIASH_PAR_METRIC_META+x} ]; then echo "strsplit('$VIASH_PAR_METRIC_META', split = ':')[[1]]"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

cat("Reading score meta files\\n")
metric_meta <- map_df(
  par\$metric_meta,
  read_tsv,
  col_types = cols(
    metric_id = "c",
    metric_min = "d",
    metric_max = "d",
    metric_higherisbetter = "l"
  )
)
# prepend 'metric_' to colnames if this was not done already
colnames(metric_meta) <- paste0("metric_", gsub("^metric_", "", colnames(metric_meta)))

cat("Reading input h5ad files\\n")
scores <- map_df(par\$input, function(inp) {
  cat("Reading '", inp, "'\\n", sep = "")
  ad <- anndata::read_h5ad(inp)

  for (uns_name in c("dataset_id", "method_id", "metric_ids", "metric_values")) {
    expect_true(
      uns_name %in% names(ad\$uns),
      info = paste0("File ", inp, " must contain \`uns['", uns_name, "']\`")
    )
  }

  as_tibble(ad\$uns[c("dataset_id", "method_id", "metric_ids", "metric_values")])
}) %>%
  rename(metric_id = metric_ids, value = metric_values)

expect_true(
  all(unique(scores\$metric_id) %in% metric_meta\$metric_id),
  info = "All metric_ids in h5ad should be mentioned in the metric_meta"
)

# create method meta
method_meta <-
  if (is.null(par\$method_meta)) {
    cat("No method meta found, defaulting to all method ids present in the h5ads.\\n")
    tibble(
      method_id = unique(scores\$method_id)
    )
  } else {
    cat("Reading method meta files\\n")
    map_df(
      par\$method_meta,
      read_tsv,
      col_types = cols(
        method_id = "c",
        .default = "?"
      )
    )
  }
print(method_meta)
# prepend 'method_' to colnames if this was not done already
colnames(method_meta) <- paste0("method_", gsub("^method_", "", colnames(method_meta)))

# create method meta
dataset_meta <- 
  if (is.null(par\$dataset_meta)) {
    cat("No dataset meta found, defaulting to all dataset ids present in the h5ads.\\n")
    tibble(
      dataset_id = unique(scores\$dataset_id)
    )
  } else {
    cat("Reading method meta files\\n")
    map_df(
      par\$dataset_meta,
      read_tsv,
      col_types = cols(
        dataset_id = "c",
        .default = "?"
      )
    )
  }
# prepend 'dataset_' to colnames if this was not done already
colnames(dataset_meta) <- paste0("dataset_", gsub("^dataset_", "", colnames(dataset_meta)))

cat("Creating default scores for missing entries based on metrics meta\\n")
missing_values <- crossing(
  dataset_meta %>% select(dataset_id),
  method_meta %>% select(method_id),
  metric_meta %>% transmute(
    metric_id = metric_id,
    value = ifelse(metric_higherisbetter, metric_min, metric_max)
  )
)

cat("Creating final scores object\\n")
final_scores <- bind_rows(
  scores %>%
    inner_join(method_meta, by = "method_id") %>%
    inner_join(dataset_meta, by = "dataset_id") %>%
    inner_join(metric_meta %>% select(metric_id), by = "metric_id"),
  anti_join(missing_values, scores, by = c("method_id", "dataset_id", "metric_id"))
)
cat("Writing results to tsv files\\n")
write_tsv(final_scores, par\$output)
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
