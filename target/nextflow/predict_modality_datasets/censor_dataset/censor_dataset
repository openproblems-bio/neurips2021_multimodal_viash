#!/usr/bin/env bash

###################################
#    censor_dataset main_build    #
###################################

# This wrapper script is auto-generated by viash 0.5.3 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="censor_dataset"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "censor_dataset main_build"
  echo "A component for censoring modality alignment datasets to be given"
  echo "to competition participants for the 'predict modality' task."
  echo
  echo "Options:"

  echo "   --input_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset.h5ad"
  echo "        An input h5ad dataset."
  echo ""


  echo "   --input_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset.h5ad"
  echo "        An input h5ad dataset."
  echo ""


  echo "   --output_train_mod1"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_train_mod1.h5ad"
  echo "        Mod1 h5ad file for only the train cells."
  echo ""


  echo "   --output_train_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_mod2.h5ad"
  echo "        Mod2 h5ad file for only the train cells."
  echo ""


  echo "   --output_test_mod1"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_test_mod1.h5ad"
  echo "        Mod1 h5ad file for only the test cells."
  echo ""


  echo "   --output_test_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_solution.h5ad"
  echo "        Mod2 h5ad file for only the test cells."
  echo ""


  echo "   --seed"
  echo "        type: integer"
  echo "        The seed for determining the train/test split."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "censor_dataset main_build"
            exit
            ;;
        --input_mod1)
            VIASH_PAR_INPUT_MOD1="$2"
            shift 2
            ;;
        --input_mod1=*)
            VIASH_PAR_INPUT_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_mod2)
            VIASH_PAR_INPUT_MOD2="$2"
            shift 2
            ;;
        --input_mod2=*)
            VIASH_PAR_INPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_mod1)
            VIASH_PAR_OUTPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --output_train_mod1=*)
            VIASH_PAR_OUTPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_mod2)
            VIASH_PAR_OUTPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --output_train_mod2=*)
            VIASH_PAR_OUTPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_mod1)
            VIASH_PAR_OUTPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --output_test_mod1=*)
            VIASH_PAR_OUTPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_mod2)
            VIASH_PAR_OUTPUT_TEST_MOD2="$2"
            shift 2
            ;;
        --output_test_mod2=*)
            VIASH_PAR_OUTPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --seed)
            VIASH_PAR_SEED="$2"
            shift 2
            ;;
        --seed=*)
            VIASH_PAR_SEED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_MOD1" ]; then
  ViashError '--input_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MOD2" ]; then
  ViashError '--input_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD1" ]; then
  ViashError '--output_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD2" ]; then
  ViashError '--output_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD1" ]; then
  ViashError '--output_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD2" ]; then
  ViashError '--output_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-censor_dataset-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
requireNamespace("anndata", quietly = TRUE)
library(assertthat, quietly = TRUE, warn.conflicts = FALSE)
library(Matrix, quietly = TRUE, warn.conflicts = FALSE)

## VIASH START
# The following code has been auto-generated by Viash.
# get parameters from cli
par <- list(
  "input_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_MOD1'"; else echo NULL; fi ),
  "input_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_MOD2'"; else echo NULL; fi ),
  "output_train_mod1" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD1'"; else echo NULL; fi ),
  "output_train_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD2'"; else echo NULL; fi ),
  "output_test_mod1" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD1'"; else echo NULL; fi ),
  "output_test_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD2'"; else echo NULL; fi ),
  "seed" = $( if [ ! -z ${VIASH_PAR_SEED+x} ]; then echo "as.integer($VIASH_PAR_SEED)"; else echo NULL; fi )
)

# get meta parameters
meta <- list(
  functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
  resources_dir = "$VIASH_RESOURCES_DIR"
)

# get resources dir
resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

cat("Using seed ", par\$seed, "\\n", sep = "")
set.seed(par\$seed)

cat("Reading input data\\n")
input_mod1 <- anndata::read_h5ad(par\$input_mod1)
input_mod2 <- anndata::read_h5ad(par\$input_mod2)
ad1_mod <- unique(input_mod1\$var[["feature_types"]])
ad2_mod <- unique(input_mod2\$var[["feature_types"]])
new_dataset_id <- paste0(input_mod1\$uns[["dataset_id"]], "_PM_", tolower(ad1_mod), "2", tolower(ad2_mod))
ad1_uns <- list(dataset_id = new_dataset_id)
ad2_uns <- list(dataset_id = new_dataset_id)
ad1_obsm <- list()
ad2_obsm <- list()
ad1_var <- input_mod1\$var %>% select(one_of("gene_ids"), feature_types)
ad2_var <- input_mod2\$var %>% select(one_of("gene_ids"), feature_types)

if (ad1_mod == "ATAC") {
  input_mod1\$X@x <- (input_mod1\$X@x > 0) + 0
  # copy gene activity in new object
  ad1_uns\$gene_activity_var_names <- input_mod1\$uns\$gene_activity_var_names
  ad1_obsm\$gene_activity <- as(input_mod1\$obsm\$gene_activity, "CsparseMatrix")
}

if (ad2_mod == "ATAC") {
  if (ncol(input_mod2) > 10000) {
    sel_ix <- if (!is.null(input_mod2\$uns[["..."]])) {

    } else {
      poss_ix <- which(Matrix::colSums(input_mod2\$X) > 0)
      sort(sample(poss_ix, 10000))
    }
    
    input_mod2 <- input_mod2[, sel_ix]\$copy()
    ad2_var <- ad2_var[sel_ix, , drop = FALSE]
  }
  input_mod2\$X@x <- (input_mod2\$X@x > 0) + 0

  # copy gene activity in new object
  ad2_uns\$gene_activity_var_names <- input_mod2\$uns\$gene_activity_var_names
  ad2_obsm\$gene_activity <- as(input_mod2\$obsm\$gene_activity, "CsparseMatrix")
}

cat("Creating train/test split\\n")
is_train <- which(input_mod1\$obs[["is_train"]])
is_test <- which(!input_mod1\$obs[["is_train"]])

# sample cells
if (length(is_test) > 1000) {
  ct <- input_mod1\$obs[["cell_type"]][is_test] %>% as.character()
  ct_tab <- table(ct)
  ct_freq <- setNames(as.vector(ct_tab) / sum(ct_tab), names(ct_tab))
  is_test <- sample(is_test, 1000, prob = sqrt(1 / ct_freq[ct]))
  # table(input_mod1\$obs[["cell_type"]][is_test])
}

train_obs <- input_mod1\$obs[is_train, , drop = FALSE] %>% select(one_of("batch", "size_factors"))
test_obs <- input_mod1\$obs[is_test, , drop = FALSE] %>% select(one_of("batch", "size_factors"))
subset_mats <- function(li, obs_filt) {
  out <- list()
  for (n in names(li)) {
    out[[n]] <- li[[n]][obs_filt, , drop = FALSE]
  }
  out
}

cat("Create train objects\\n")
output_train_mod1 <- anndata::AnnData(
  X = input_mod1\$X[is_train, , drop = FALSE],
  layers = subset_mats(input_mod1\$layers, is_train),
  obsm = subset_mats(ad1_obsm, is_train),
  obs = train_obs,
  var = ad1_var,
  uns = ad1_uns
)
output_train_mod2 <- anndata::AnnData(
  X = input_mod2\$X[is_train, , drop = FALSE],
  layers = subset_mats(input_mod2\$layers, is_train),
  obsm = subset_mats(ad2_obsm, is_train),
  obs = train_obs,
  var = ad2_var,
  uns = ad2_uns
)

cat("Create test objects\\n")
output_test_mod1 <- anndata::AnnData(
  X = input_mod1\$X[is_test, , drop = FALSE],
  layers = subset_mats(input_mod1\$layers, is_test),
  obsm = subset_mats(ad1_obsm, is_test),
  obs = test_obs,
  var = ad1_var,
  uns = ad1_uns
)
output_test_mod2 <- anndata::AnnData(
  X = input_mod2\$X[is_test, , drop = FALSE],
  layers = subset_mats(input_mod2\$layers, is_test),
  obsm = subset_mats(ad2_obsm, is_test),
  obs = test_obs,
  var = ad2_var,
  uns = ad2_uns
)

cat("Saving output files as h5ad\\n")
zzz <- output_train_mod1\$write_h5ad(par\$output_train_mod1, compression = "gzip")
zzz <- output_train_mod2\$write_h5ad(par\$output_train_mod2, compression = "gzip")
zzz <- output_test_mod1\$write_h5ad(par\$output_test_mod1, compression = "gzip")
zzz <- output_test_mod2\$write_h5ad(par\$output_test_mod2, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
