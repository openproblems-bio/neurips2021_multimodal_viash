functionality:
  name: "censor_dataset"
  namespace: "predict_modality_datasets"
  version: "1.3.0"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "author"
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  arguments:
  - type: "file"
    name: "--input_mod1"
    alternatives: []
    description: "An input h5ad dataset."
    example: "dataset.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_mod2"
    alternatives: []
    description: "An input h5ad dataset."
    example: "dataset.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output_train_mod1"
    alternatives: []
    description: "Mod1 h5ad file for only the train cells."
    example: "dataset_train_mod1.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output_train_mod2"
    alternatives: []
    description: "Mod2 h5ad file for only the train cells."
    example: "dataset_mod2.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output_test_mod1"
    alternatives: []
    description: "Mod1 h5ad file for only the test cells."
    example: "dataset_test_mod1.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output_test_mod2"
    alternatives: []
    description: "Mod2 h5ad file for only the test cells."
    example: "dataset_solution.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--seed"
    alternatives: []
    description: "The seed for determining the train/test split."
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ##############################
      #    censor_dataset 1.3.0    #
      ##############################
      
      # This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "censor_dataset 1.3.0"
        echo "A component for censoring modality alignment datasets to be given"
        echo "to competition participants for the 'predict modality' task."
        echo
        echo "Options:"
      
        echo "   --input_mod1"
        echo "        type: file, required parameter"
        echo "        example: dataset.h5ad"
        echo "        An input h5ad dataset."
        echo ""
      
      
        echo "   --input_mod2"
        echo "        type: file, required parameter"
        echo "        example: dataset.h5ad"
        echo "        An input h5ad dataset."
        echo ""
      
      
        echo "   --output_train_mod1"
        echo "        type: file, required parameter, output"
        echo "        example: dataset_train_mod1.h5ad"
        echo "        Mod1 h5ad file for only the train cells."
        echo ""
      
      
        echo "   --output_train_mod2"
        echo "        type: file, required parameter, output"
        echo "        example: dataset_mod2.h5ad"
        echo "        Mod2 h5ad file for only the train cells."
        echo ""
      
      
        echo "   --output_test_mod1"
        echo "        type: file, required parameter, output"
        echo "        example: dataset_test_mod1.h5ad"
        echo "        Mod1 h5ad file for only the test cells."
        echo ""
      
      
        echo "   --output_test_mod2"
        echo "        type: file, required parameter, output"
        echo "        example: dataset_solution.h5ad"
        echo "        Mod2 h5ad file for only the test cells."
        echo ""
      
      
        echo "   --seed"
        echo "        type: integer"
        echo "        The seed for determining the train/test split."
        echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Running 'docker pull $1'"
        docker pull $1 && return 0 || return 1
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        set +e
        ViashDockerPull $1
        out=$?
        set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          set +e
          docker push $VSHD_ID
          outPush=$?
          set -e
          if [ $outPush -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' push succeeded."
          else
            ViashError "Container '$VSHD_ID' push errored."
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            set +e
            docker push $1 > /dev/null 2> /dev/null
            outPush=$?
            set -e
            if [ $outPush -eq 0 ]; then
              ViashNotice "Container '$VSHD_ID' push succeeded."
            else
            ViashError "Container '$VSHD_ID' push errored."
              exit 1
            fi
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM dataintuitive/randpy:r4.0_py3.8_bioc3.12
      
      RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
        Rscript -e 'remotes::install_cran(c("Seurat", "proxyC"), repos = "https://cran.rstudio.com")'
      
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
      
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-censor_dataset-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Running 'docker build -t $@ $tmpdir'"
        set +e
        if [ $VIASH_VERBOSITY -ge 6 ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        set -e
        if [ ! $out -eq 0 ]; then
          ViashError "Error occurred while building the container $@."
          if [ ! $VIASH_VERBOSITY -ge 6 ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "censor_dataset 1.3.0"
                  exit
                  ;;
              --input_mod1)
                  VIASH_PAR_INPUT_MOD1="$2"
                  shift 2
                  ;;
              --input_mod1=*)
                  VIASH_PAR_INPUT_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_mod2)
                  VIASH_PAR_INPUT_MOD2="$2"
                  shift 2
                  ;;
              --input_mod2=*)
                  VIASH_PAR_INPUT_MOD2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output_train_mod1)
                  VIASH_PAR_OUTPUT_TRAIN_MOD1="$2"
                  shift 2
                  ;;
              --output_train_mod1=*)
                  VIASH_PAR_OUTPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output_train_mod2)
                  VIASH_PAR_OUTPUT_TRAIN_MOD2="$2"
                  shift 2
                  ;;
              --output_train_mod2=*)
                  VIASH_PAR_OUTPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output_test_mod1)
                  VIASH_PAR_OUTPUT_TEST_MOD1="$2"
                  shift 2
                  ;;
              --output_test_mod1=*)
                  VIASH_PAR_OUTPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output_test_mod2)
                  VIASH_PAR_OUTPUT_TEST_MOD2="$2"
                  shift 2
                  ;;
              --output_test_mod2=*)
                  VIASH_PAR_OUTPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --seed)
                  VIASH_PAR_SEED="$2"
                  shift 2
                  ;;
              --seed=*)
                  VIASH_PAR_SEED=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  ViashDockerSetup 'openproblems/predict_modality_datasets_censor_dataset:1.3.0' "$2"
                  exit 0
                  ;;
              ---setup=*)
                  ViashDockerSetup 'openproblems/predict_modality_datasets_censor_dataset:1.3.0' "$(ViashRemoveFlags "$1")"
                  exit 0
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/predict_modality_datasets_censor_dataset:1.3.0"
                  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/predict_modality_datasets_censor_dataset:1.3.0
                  exit 0
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT_MOD1" ]; then
        ViashError '--input_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_MOD2" ]; then
        ViashError '--input_mod2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD1" ]; then
        ViashError '--output_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD2" ]; then
        ViashError '--output_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD1" ]; then
        ViashError '--output_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD2" ]; then
        ViashError '--output_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      ViashDockerSetup 'openproblems/predict_modality_datasets_censor_dataset:1.3.0' ifneedbepullelsecachedbuild
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT_MOD1" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_MOD1")"
        VIASH_PAR_INPUT_MOD1=$(ViashAutodetectMount "$VIASH_PAR_INPUT_MOD1")
      fi
      if [ ! -z "$VIASH_PAR_INPUT_MOD2" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_MOD2")"
        VIASH_PAR_INPUT_MOD2=$(ViashAutodetectMount "$VIASH_PAR_INPUT_MOD2")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT_TRAIN_MOD1" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_TRAIN_MOD1")"
        VIASH_PAR_OUTPUT_TRAIN_MOD1=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_TRAIN_MOD1")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT_TRAIN_MOD2" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_TRAIN_MOD2")"
        VIASH_PAR_OUTPUT_TRAIN_MOD2=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_TRAIN_MOD2")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT_TEST_MOD1" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_TEST_MOD1")"
        VIASH_PAR_OUTPUT_TEST_MOD1=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_TEST_MOD1")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT_TEST_MOD2" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_TEST_MOD2")"
        VIASH_PAR_OUTPUT_TEST_MOD2=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_TEST_MOD2")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      
      # change file ownership
      function viash_perform_chown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT_TRAIN_MOD1" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_datasets_censor_dataset:1.3.0 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_TRAIN_MOD1"
        fi
        if [ ! -z "$VIASH_PAR_OUTPUT_TRAIN_MOD2" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_datasets_censor_dataset:1.3.0 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_TRAIN_MOD2"
        fi
        if [ ! -z "$VIASH_PAR_OUTPUT_TEST_MOD1" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_datasets_censor_dataset:1.3.0 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_TEST_MOD1"
        fi
        if [ ! -z "$VIASH_PAR_OUTPUT_TEST_MOD2" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_datasets_censor_dataset:1.3.0 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_TEST_MOD2"
        fi
      }
      trap viash_perform_chown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_datasets_censor_dataset:1.3.0
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-censor_dataset-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      cat("Loading dependencies\\n")
      options(tidyverse.quiet = TRUE)
      library(tidyverse)
      requireNamespace("anndata", quietly = TRUE)
      library(assertthat, quietly = TRUE, warn.conflicts = FALSE)
      library(Matrix, quietly = TRUE, warn.conflicts = FALSE)
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par <- list(
        "input_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_MOD1'"; else echo NULL; fi ),
        "input_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_MOD2'"; else echo NULL; fi ),
        "output_train_mod1" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD1'"; else echo NULL; fi ),
        "output_train_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD2'"; else echo NULL; fi ),
        "output_test_mod1" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD1'"; else echo NULL; fi ),
        "output_test_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD2'"; else echo NULL; fi ),
        "seed" = $( if [ ! -z ${VIASH_PAR_SEED+x} ]; then echo "as.integer($VIASH_PAR_SEED)"; else echo NULL; fi )
      )
      
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      ## VIASH END
      
      cat("Using seed ", par\$seed, "\\n", sep = "")
      set.seed(par\$seed)
      
      cat("Reading input data\\n")
      input_mod1 <- anndata::read_h5ad(par\$input_mod1)
      input_mod2 <- anndata::read_h5ad(par\$input_mod2)
      ad1_mod <- unique(input_mod1\$var[["feature_types"]])
      ad2_mod <- unique(input_mod2\$var[["feature_types"]])
      new_dataset_id <- paste0(input_mod1\$uns[["dataset_id"]], "_PM_", tolower(ad1_mod), "2", tolower(ad2_mod))
      ad1_uns <- list(dataset_id = new_dataset_id, organism = "human")
      ad2_uns <- list(dataset_id = new_dataset_id, organism = "human")
      ad1_obsm <- list()
      ad2_obsm <- list()
      ad1_var <- input_mod1\$var %>% select(one_of("gene_ids"), feature_types)
      ad2_var <- input_mod2\$var %>% select(one_of("gene_ids"), feature_types)
      
      if (ad1_mod == "ATAC") {
        input_mod1\$X@x <- (input_mod1\$X@x > 0) + 0
        # copy gene activity in new object
        ad1_uns\$gene_activity_var_names <- input_mod1\$uns\$gene_activity_var_names
        ad1_obsm\$gene_activity <- as(input_mod1\$obsm\$gene_activity, "CsparseMatrix")
      }
      
      if (ad2_mod == "ATAC") {
        if (ncol(input_mod2) > 10000) {
          sel_ix <- if (!is.null(input_mod2\$uns[["..."]])) {
      
          } else {
            poss_ix <- which(Matrix::colSums(input_mod2\$X) > 0)
            sort(sample(poss_ix, 10000))
          }
          
          input_mod2 <- input_mod2[, sel_ix]\$copy()
          ad2_var <- ad2_var[sel_ix, , drop = FALSE]
        }
        input_mod2\$X@x <- (input_mod2\$X@x > 0) + 0
      
        # copy gene activity in new object
        ad2_uns\$gene_activity_var_names <- input_mod2\$uns\$gene_activity_var_names
        ad2_obsm\$gene_activity <- as(input_mod2\$obsm\$gene_activity, "CsparseMatrix")
      }
      
      cat("Creating train/test split\\n")
      is_train <- which(input_mod1\$obs[["is_train"]])
      is_test <- which(!input_mod1\$obs[["is_train"]])
      
      # sample cells
      if (length(is_test) > 1000) {
        ct <- input_mod1\$obs[["cell_type"]][is_test] %>% as.character()
        ct_tab <- table(ct)
        ct_freq <- setNames(as.vector(ct_tab) / sum(ct_tab), names(ct_tab))
        is_test <- sample(is_test, 1000, prob = sqrt(1 / ct_freq[ct]))
        # table(input_mod1\$obs[["cell_type"]][is_test])
      }
      
      train_obs <- input_mod1\$obs[is_train, , drop = FALSE] %>% select(one_of("batch", "size_factors"))
      test_obs <- input_mod1\$obs[is_test, , drop = FALSE] %>% select(one_of("batch", "size_factors"))
      subset_mats <- function(li, obs_filt) {
        out <- list()
        for (n in names(li)) {
          out[[n]] <- li[[n]][obs_filt, , drop = FALSE]
        }
        out
      }
      
      cat("Create train objects\\n")
      output_train_mod1 <- anndata::AnnData(
        X = input_mod1\$X[is_train, , drop = FALSE],
        layers = subset_mats(input_mod1\$layers, is_train),
        obsm = subset_mats(ad1_obsm, is_train),
        obs = train_obs,
        var = ad1_var,
        uns = ad1_uns
      )
      output_train_mod2 <- anndata::AnnData(
        X = input_mod2\$X[is_train, , drop = FALSE],
        layers = subset_mats(input_mod2\$layers, is_train),
        obsm = subset_mats(ad2_obsm, is_train),
        obs = train_obs,
        var = ad2_var,
        uns = ad2_uns
      )
      
      cat("Create test objects\\n")
      output_test_mod1 <- anndata::AnnData(
        X = input_mod1\$X[is_test, , drop = FALSE],
        layers = subset_mats(input_mod1\$layers, is_test),
        obsm = subset_mats(ad1_obsm, is_test),
        obs = test_obs,
        var = ad1_var,
        uns = ad1_uns
      )
      output_test_mod2 <- anndata::AnnData(
        X = input_mod2\$X[is_test, , drop = FALSE],
        layers = subset_mats(input_mod2\$layers, is_test),
        obsm = subset_mats(ad2_obsm, is_test),
        obs = test_obs,
        var = ad2_var,
        uns = ad2_uns
      )
      
      cat("Saving output files as h5ad\\n")
      zzz <- output_train_mod1\$write_h5ad(par\$output_train_mod1, compression = "gzip")
      zzz <- output_train_mod2\$write_h5ad(par\$output_train_mod2, compression = "gzip")
      zzz <- output_test_mod1\$write_h5ad(par\$output_test_mod1, compression = "gzip")
      zzz <- output_test_mod2\$write_h5ad(par\$output_test_mod2, compression = "gzip")
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      Rscript "\$tempscript"
      
      VIASHEOF
      

    dest: "censor_dataset"
    is_executable: true
  description: "A component for censoring modality alignment datasets to be given\n\
    to competition participants for the 'predict modality' task.\n"
  tests:
  - type: "r_script"
    path: "test.R"
    is_executable: true
  - type: "file"
    path: "../../../../resources_test"
  info: {}
platform:
  type: "docker"
  id: "docker"
  image: "dataintuitive/randpy:r4.0_py3.8_bioc3.12"
  target_registry: "openproblems"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  setup:
  - type: "r"
    packages: []
    cran:
    - "Seurat"
    - "proxyC"
    bioc: []
    git: []
    github: []
    gitlab: []
    bitbucket: []
    svn: []
    url: []
    script: []
    bioc_force_install: false
    oType: "r"
platforms: []
info:
  config: "src/predict_modality/datasets/censor_dataset/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/predict_modality_datasets/censor_dataset"
  executable: "target/docker/predict_modality_datasets/censor_dataset/censor_dataset"
  viash_version: "0.5.2"
  git_commit: "27287ccc258911055908d0e5cb5fda1bce9399c4"
  git_remote: "git@github.com:openproblems-bio/neurips2021_multimodal_viash.git"
