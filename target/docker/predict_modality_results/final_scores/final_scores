#!/usr/bin/env bash

############################
#    final_scores 1.0.2    #
############################

# This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "final_scores 1.0.2"
  echo "Generate the final scores."
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input.h5ad"
  echo "        Input h5ad files containing metadata and metrics in adata.uns."
  echo ""


  echo "   --method_meta"
  echo "        type: file, multiple values allowed"
  echo "        example: method_meta.tsv"
  echo "        A method metadata file. Must contain column 'method_id'."
  echo ""


  echo "   --solution_meta"
  echo "        type: file, multiple values allowed"
  echo "        example: solution.tsv"
  echo "        A solution metadata file."
  echo ""


  echo "   --metric_meta"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: metric_meta.tsv"
  echo "        A metric metadata file containing the default value of each metric in case a method errored on a particular dataset. Must contain column 'metric_id' and 'metric_value'."
  echo ""


  echo "   --output_scores"
  echo "        type: file, required parameter, output"
  echo "        example: output.tsv"
  echo "        Output tsv"
  echo ""


  echo "   --output_summary"
  echo "        type: file, required parameter, output"
  echo "        example: output.tsv"
  echo "        Output tsv"
  echo ""


  echo "   --output_json"
  echo "        type: file, required parameter, output"
  echo "        example: output.json"
  echo "        EvalAI score json"
  echo ""

}
######## Helper functions for setting up Docker images for viash ########


# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Running 'docker pull $1'"
  docker pull $1 && return 0 || return 1
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  set +e
  ViashDockerPull $1
  out=$?
  set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    set +e
    docker push $VSHD_ID
    outPush=$?
    set -e
    if [ $outPush -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' push succeeded."
    else
      ViashError "Container '$VSHD_ID' push errored."
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      set +e
      docker push $1 > /dev/null 2> /dev/null
      outPush=$?
      set -e
      if [ $outPush -eq 0 ]; then
        ViashNotice "Container '$VSHD_ID' push succeeded."
      else
      ViashError "Container '$VSHD_ID' push errored."
        exit 1
      fi
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM dataintuitive/randpy:r4.0_bioc3.12

RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
  Rscript -e 'remotes::install_cran(c("dynutils", "jsonlite"), repos = "https://cran.rstudio.com")'

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {

  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-final_scores-XXXXXX")
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $tmpdir/Dockerfile
  cp -r $VIASH_RESOURCES_DIR/* $tmpdir

  # Build the container
  ViashNotice "Running 'docker build -t $@ $tmpdir'"
  set +e
  if [ $VIASH_VERBOSITY -ge 6 ]; then
    docker build -t $@ $tmpdir
  else
    docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
  fi
  out=$?
  set -e
  if [ ! $out -eq 0 ]; then
    ViashError "Error occurred while building the container $@."
    if [ ! $VIASH_VERBOSITY -ge 6 ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
}
# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "-v \"$mount_source:$mount_target\""
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=''

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "final_scores 1.0.2"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --method_meta)
            if [ -z "$VIASH_PAR_METHOD_META" ]; then
              VIASH_PAR_METHOD_META="$2"
            else
              VIASH_PAR_METHOD_META="$VIASH_PAR_METHOD_META:""$2"
            fi
            shift 2
            ;;
        --method_meta=*)
            if [ -z "$VIASH_PAR_METHOD_META" ]; then
              VIASH_PAR_METHOD_META=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METHOD_META="$VIASH_PAR_METHOD_META:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --solution_meta)
            if [ -z "$VIASH_PAR_SOLUTION_META" ]; then
              VIASH_PAR_SOLUTION_META="$2"
            else
              VIASH_PAR_SOLUTION_META="$VIASH_PAR_SOLUTION_META:""$2"
            fi
            shift 2
            ;;
        --solution_meta=*)
            if [ -z "$VIASH_PAR_SOLUTION_META" ]; then
              VIASH_PAR_SOLUTION_META=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_SOLUTION_META="$VIASH_PAR_SOLUTION_META:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --metric_meta)
            if [ -z "$VIASH_PAR_METRIC_META" ]; then
              VIASH_PAR_METRIC_META="$2"
            else
              VIASH_PAR_METRIC_META="$VIASH_PAR_METRIC_META:""$2"
            fi
            shift 2
            ;;
        --metric_meta=*)
            if [ -z "$VIASH_PAR_METRIC_META" ]; then
              VIASH_PAR_METRIC_META=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METRIC_META="$VIASH_PAR_METRIC_META:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output_scores)
            VIASH_PAR_OUTPUT_SCORES="$2"
            shift 2
            ;;
        --output_scores=*)
            VIASH_PAR_OUTPUT_SCORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_summary)
            VIASH_PAR_OUTPUT_SUMMARY="$2"
            shift 2
            ;;
        --output_summary=*)
            VIASH_PAR_OUTPUT_SUMMARY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_json)
            VIASH_PAR_OUTPUT_JSON="$2"
            shift 2
            ;;
        --output_json=*)
            VIASH_PAR_OUTPUT_JSON=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            ViashDockerSetup 'openproblems/predict_modality_results_final_scores:1.0.2' "$2"
            exit 0
            ;;
        ---setup=*)
            ViashDockerSetup 'openproblems/predict_modality_results_final_scores:1.0.2' "$(ViashRemoveFlags "$1")"
            exit 0
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
            shift 1
            ;;
        ---debug)
            ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/predict_modality_results_final_scores:1.0.2"
            docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/predict_modality_results_final_scores:1.0.2
            exit 0
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_METRIC_META" ]; then
  ViashError '--metric_meta' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_SCORES" ]; then
  ViashError '--output_scores' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_SUMMARY" ]; then
  ViashError '--output_summary' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_JSON" ]; then
  ViashError '--output_json' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi


ViashDockerSetup 'openproblems/predict_modality_results_final_scores:1.0.2' ifneedbepullelsecachedbuild

# detect volumes from file arguments
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  IFS=":"
  for var in $VIASH_PAR_INPUT; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_INPUT" ]; then
      VIASH_TEST_INPUT="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_INPUT="$VIASH_TEST_INPUT:""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
fi
if [ ! -z "$VIASH_PAR_METHOD_META" ]; then
  IFS=":"
  for var in $VIASH_PAR_METHOD_META; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_METHOD_META" ]; then
      VIASH_TEST_METHOD_META="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_METHOD_META="$VIASH_TEST_METHOD_META:""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_METHOD_META="$VIASH_TEST_METHOD_META"
fi
if [ ! -z "$VIASH_PAR_SOLUTION_META" ]; then
  IFS=":"
  for var in $VIASH_PAR_SOLUTION_META; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_SOLUTION_META" ]; then
      VIASH_TEST_SOLUTION_META="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_SOLUTION_META="$VIASH_TEST_SOLUTION_META:""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_SOLUTION_META="$VIASH_TEST_SOLUTION_META"
fi
if [ ! -z "$VIASH_PAR_METRIC_META" ]; then
  IFS=":"
  for var in $VIASH_PAR_METRIC_META; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_METRIC_META" ]; then
      VIASH_TEST_METRIC_META="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_METRIC_META="$VIASH_TEST_METRIC_META:""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_METRIC_META="$VIASH_TEST_METRIC_META"
fi
if [ ! -z "$VIASH_PAR_OUTPUT_SCORES" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_SCORES")"
  VIASH_PAR_OUTPUT_SCORES=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_SCORES")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_SUMMARY" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_SUMMARY")"
  VIASH_PAR_OUTPUT_SUMMARY=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_SUMMARY")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_JSON" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_JSON")"
  VIASH_PAR_OUTPUT_JSON=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_JSON")
fi

# Always mount the resource directory
VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")

# Always mount the VIASH_TEMP directory
VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")

# change file ownership
function viash_perform_chown {
  
  if [ ! -z "$VIASH_PAR_OUTPUT_SCORES" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_results_final_scores:1.0.2 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_SCORES"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_SUMMARY" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_results_final_scores:1.0.2 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_SUMMARY"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_JSON" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_results_final_scores:1.0.2 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_JSON"
  fi
}
trap viash_perform_chown EXIT


cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openproblems/predict_modality_results_final_scores:1.0.2
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-final_scores-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
library(anndata, warn.conflicts = FALSE)
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(testthat, warn.conflicts = FALSE, quietly = TRUE)
library(rlang)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "strsplit('$VIASH_PAR_INPUT', split = ':')[[1]]"; else echo NULL; fi ),
  "method_meta" = $( if [ ! -z ${VIASH_PAR_METHOD_META+x} ]; then echo "strsplit('$VIASH_PAR_METHOD_META', split = ':')[[1]]"; else echo NULL; fi ),
  "solution_meta" = $( if [ ! -z ${VIASH_PAR_SOLUTION_META+x} ]; then echo "strsplit('$VIASH_PAR_SOLUTION_META', split = ':')[[1]]"; else echo NULL; fi ),
  "metric_meta" = $( if [ ! -z ${VIASH_PAR_METRIC_META+x} ]; then echo "strsplit('$VIASH_PAR_METRIC_META', split = ':')[[1]]"; else echo NULL; fi ),
  "output_scores" = $( if [ ! -z ${VIASH_PAR_OUTPUT_SCORES+x} ]; then echo "'$VIASH_PAR_OUTPUT_SCORES'"; else echo NULL; fi ),
  "output_summary" = $( if [ ! -z ${VIASH_PAR_OUTPUT_SUMMARY+x} ]; then echo "'$VIASH_PAR_OUTPUT_SUMMARY'"; else echo NULL; fi ),
  "output_json" = $( if [ ! -z ${VIASH_PAR_OUTPUT_JSON+x} ]; then echo "'$VIASH_PAR_OUTPUT_JSON'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

json_metric <- "rmse"

cat("Reading solution meta files\\n")
solution_meta <- readr::read_tsv(
  par\$solution_meta,
  col_types = cols(
    dataset_id = "c",
    modality = "c",
    default_rmse = "d",
    default_mae = "d"
  )
)
dataset_meta <- solution_meta %>% transmute(
  dataset_id,
  dataset_subtask = toupper(gsub(".*_", "", dataset_id))
)
dataset_specific_defaults <- solution_meta %>%
  select(dataset_id, rmse = default_rmse, mae = default_mae) %>%
  gather(metric_id, missing_value, -dataset_id)

cat("Reading metric meta files\\n")
overall_metric_defaults <-
  map_df(
    par\$metric_meta,
    read_tsv,
    col_types = cols(
      metric_id = "c",
      metric_min = "c",
      metric_max = "c",
      metric_higherisbetter = "l"
    )
  ) %>%
  mutate(
    metric_min = as.numeric(metric_min),
    metric_max = as.numeric(metric_max)
  ) %>% 
  transmute(
    metric_id = metric_id, 
    missing_value = ifelse(metric_higherisbetter, metric_min, metric_max)
  )
metric_defaults <- bind_rows(
  dataset_specific_defaults,
  crossing(overall_metric_defaults, dataset_id = dataset_meta\$dataset_id) %>% anti_join(dataset_specific_defaults, by = "metric_id")
)

cat("Reading input h5ad files\\n")
scores <- map_df(par\$input, function(inp) {
  cat("Reading '", inp, "'\\n", sep = "")
  ad <- anndata::read_h5ad(inp)

  for (uns_name in c("dataset_id", "method_id", "metric_ids", "metric_values")) {
    expect_true(
      uns_name %in% names(ad\$uns),
      info = paste0("File ", inp, " must contain \`uns['", uns_name, "']\`")
    )
  }

  out <- as_tibble(ad\$uns[c("dataset_id", "method_id", "metric_ids", "metric_values")])
  rm(ad)
  out
}) %>%
  rename(metric_id = metric_ids, value = metric_values) %>%
  filter(!is.na(value))

expect_true(
  all(unique(scores\$metric_id) %in% metric_defaults\$metric_id),
  info = "All metric_ids in h5ad should be mentioned in the metric_meta"
)

# create method meta
method_meta <-
  if (is.null(par\$method_meta)) {
    cat("No method meta found, defaulting to all method ids present in the h5ads.\\n")
    tibble(
      method_id = unique(scores\$method_id)
    )
  } else {
    cat("Reading method meta files\\n")
    map_df(
      par\$method_meta,
      read_tsv,
      col_types = cols(
        method_id = "c",
        .default = "?"
      )
    )
  }
print(method_meta)
# prepend 'method_' to colnames if this was not done already
colnames(method_meta) <- paste0("method_", gsub("^method_", "", colnames(method_meta)))

cat("Creating default scores for missing entries based on metrics meta\\n")
default_scores <- crossing(
  method_id = method_meta\$method_id,
  metric_defaults
) %>% 
  mutate(value = NA_real_) %>% 
  rename(value_after_default = missing_value)

final_scores <- bind_rows(
  scores %>% mutate(value_after_default = value),
  anti_join(default_scores, scores, by = c("method_id", "dataset_id", "metric_id"))
) %>%
  left_join(dataset_meta, by = "dataset_id")

summary <-
  bind_rows(final_scores, final_scores %>% mutate(dataset_subtask = "Overall")) %>%
  group_by(method_id, metric_id, dataset_subtask) %>%
  summarise(
    mean = mean(value_after_default),
    var = var(value_after_default),
    .groups = "drop"
  )

# unique(scores\$metric_id)

# summary %>%
#   filter(metric_id == "mean_spearman_per_cell") %>%
#   select(-var) %>%
#   spread(dataset_subtask, mean) %>%
#   arrange(Overall)

# summary %>%
#   filter(metric_id == "mse") %>%
#   select(-var) %>%
#   spread(dataset_subtask, mean) %>%
#   arrange(Overall)

json_out <- summary %>%
  filter(metric_id == json_metric) %>%
  select(-var, -metric_id) %>%
  spread(dataset_subtask, mean) %>%
  arrange(Overall) 

cat("Writing output\\n")
final_scores <- final_scores %>% map(as.vector) %>% as_tibble
summary <- summary %>% map(as.vector) %>% as_tibble
write_tsv(final_scores, par\$output_scores)
write_tsv(summary, par\$output_summary)
jsonlite::write_json(json_out, par\$output_json)
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
