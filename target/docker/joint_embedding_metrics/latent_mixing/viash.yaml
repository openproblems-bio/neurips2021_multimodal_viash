functionality:
  name: "latent_mixing"
  namespace: "joint_embedding_metrics"
  version: "1.2.0"
  authors:
  - name: "Ann Chen"
    email: "ann.chen@czbiohub.org"
    roles:
    - "author"
    - "maintainer"
    props:
      github: "atchen"
  arguments:
  - type: "file"
    name: "--input_prediction"
    alternatives: []
    description: "Prediction by a method"
    example: "prediction.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_solution"
    alternatives: []
    description: "Gold standard solution"
    example: "solution.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Latent mixing metric measures how well the latent cell representations\
      \ are mixed between batches relative to the global frequency of batches."
    example: "output.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_neighbors"
    alternatives: []
    description: "Number of neighbors for the entropy_batch_mixing metric."
    default: 100
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      #############################
      #    latent_mixing 1.2.0    #
      #############################
      
      # This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Ann Chen <ann.chen@czbiohub.org> (author, maintainer) {github: atchen}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "latent_mixing 1.2.0"
        echo "Calculate latent mixing metric for joint embedding task."
        echo
        echo "Options:"
      
        echo "   --input_prediction"
        echo "        type: file, required parameter"
        echo "        example: prediction.h5ad"
        echo "        Prediction by a method"
        echo ""
      
      
        echo "   --input_solution"
        echo "        type: file, required parameter"
        echo "        example: solution.h5ad"
        echo "        Gold standard solution"
        echo ""
      
      
        echo "   --output"
        echo "        type: file, required parameter, output"
        echo "        example: output.h5ad"
        echo "        Latent mixing metric measures how well the latent cell representations are mixed between batches relative to the global frequency of batches."
        echo ""
      
      
        echo "   --n_neighbors"
        echo "        type: integer"
        echo "        default: 100"
        echo "        Number of neighbors for the entropy_batch_mixing metric."
        echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Running 'docker pull $1'"
        docker pull $1 && return 0 || return 1
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        set +e
        ViashDockerPull $1
        out=$?
        set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          set +e
          docker push $VSHD_ID
          outPush=$?
          set -e
          if [ $outPush -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' push succeeded."
          else
            ViashError "Container '$VSHD_ID' push errored."
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            set +e
            docker push $1 > /dev/null 2> /dev/null
            outPush=$?
            set -e
            if [ $outPush -eq 0 ]; then
              ViashNotice "Container '$VSHD_ID' push succeeded."
            else
            ViashError "Container '$VSHD_ID' push errored."
              exit 1
            fi
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM python:3.8
      
      RUN pip install --upgrade pip && \
        pip install --no-cache-dir "anndata" "sklearn" "scipy"
      
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
      
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-latent_mixing-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Running 'docker build -t $@ $tmpdir'"
        set +e
        if [ $VIASH_VERBOSITY -ge 6 ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        set -e
        if [ ! $out -eq 0 ]; then
          ViashError "Error occurred while building the container $@."
          if [ ! $VIASH_VERBOSITY -ge 6 ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "latent_mixing 1.2.0"
                  exit
                  ;;
              --input_prediction)
                  VIASH_PAR_INPUT_PREDICTION="$2"
                  shift 2
                  ;;
              --input_prediction=*)
                  VIASH_PAR_INPUT_PREDICTION=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_solution)
                  VIASH_PAR_INPUT_SOLUTION="$2"
                  shift 2
                  ;;
              --input_solution=*)
                  VIASH_PAR_INPUT_SOLUTION=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_neighbors)
                  VIASH_PAR_N_NEIGHBORS="$2"
                  shift 2
                  ;;
              --n_neighbors=*)
                  VIASH_PAR_N_NEIGHBORS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  ViashDockerSetup 'openproblems/joint_embedding_metrics_latent_mixing:1.2.0' "$2"
                  exit 0
                  ;;
              ---setup=*)
                  ViashDockerSetup 'openproblems/joint_embedding_metrics_latent_mixing:1.2.0' "$(ViashRemoveFlags "$1")"
                  exit 0
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/joint_embedding_metrics_latent_mixing:1.2.0"
                  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/joint_embedding_metrics_latent_mixing:1.2.0
                  exit 0
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
        ViashError '--input_prediction' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
        ViashError '--input_solution' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_N_NEIGHBORS" ]; then
        VIASH_PAR_N_NEIGHBORS="100"
      fi
      
      ViashDockerSetup 'openproblems/joint_embedding_metrics_latent_mixing:1.2.0' ifneedbepullelsecachedbuild
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_PREDICTION")"
        VIASH_PAR_INPUT_PREDICTION=$(ViashAutodetectMount "$VIASH_PAR_INPUT_PREDICTION")
      fi
      if [ ! -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_SOLUTION")"
        VIASH_PAR_INPUT_SOLUTION=$(ViashAutodetectMount "$VIASH_PAR_INPUT_SOLUTION")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      
      # change file ownership
      function viash_perform_chown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/joint_embedding_metrics_latent_mixing:1.2.0 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap viash_perform_chown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openproblems/joint_embedding_metrics_latent_mixing:1.2.0
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-latent_mixing-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      import anndata as ad
      import numpy as np
      import scipy
      from sklearn.neighbors import NearestNeighbors
      
      # VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input_prediction': $( if [ ! -z ${VIASH_PAR_INPUT_PREDICTION+x} ]; then echo "'$VIASH_PAR_INPUT_PREDICTION'"; else echo None; fi ),
        'input_solution': $( if [ ! -z ${VIASH_PAR_INPUT_SOLUTION+x} ]; then echo "'$VIASH_PAR_INPUT_SOLUTION'"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
        'n_neighbors': $( if [ ! -z ${VIASH_PAR_N_NEIGHBORS+x} ]; then echo "int('$VIASH_PAR_N_NEIGHBORS')"; else echo None; fi )
      }
      
      resources_dir = '$VIASH_RESOURCES_DIR'
      
      # VIASH END
      
      print("Read input files")
      predict_adata = ad.read_h5ad(par["input_prediction"])
      solution_adata = ad.read_h5ad(par["input_solution"])
      
      print("Merge prediction with solution")
      merged_adata = predict_adata.copy()
      
      batch_val = solution_adata.obs["batch"].astype(str)
      batch_unique_values, batch_index = np.unique(batch_val, return_inverse=True)
      
      merged_adata.obs["batch"] = batch_index
      
      def entropy_batch_mixing(
          latent_space, batches, n_neighbors=50, n_pools=50, n_samples_per_pool=100
      ):
      
          def neg_kl(hist_data, global_freq):
              n_batches = len(np.unique(hist_data))
              if n_batches > 2:
                  raise ValueError("Should be only two clusters for this metric")
              frequency = np.mean(hist_data == 1)
              if frequency == 0 or frequency == 1:
                  return 0
              return -(
                  frequency * np.log(frequency / global_freq)
                  + (1 - frequency) * np.log((1 - frequency) / (1 - global_freq))
              )
      
          n_neighbors = min(n_neighbors, len(latent_space) - 1)
          nne = NearestNeighbors(n_neighbors=1 + n_neighbors, n_jobs=8)
          nne.fit(latent_space)
          kmatrix = nne.kneighbors_graph(latent_space) - scipy.sparse.identity(
              latent_space.shape[0]
          )
      
          global_freq = np.mean(batches)
          print(global_freq)
          score = 0
          for t in range(n_pools):
              indices = np.random.choice(
                  np.arange(latent_space.shape[0]), size=n_samples_per_pool
              )
              score += np.mean(
                  [
                      neg_kl(
                          batches[  # the batches of cell i's neighbors
                              kmatrix[indices].nonzero()[
                                  1
                              ][  # the neighbors of cell i (columns in row i)
                                  kmatrix[indices].nonzero()[0] == i  # the row of cell i
                              ]
                          ],
                          global_freq,
                      )
                      for i in range(n_samples_per_pool)
                  ]
              )
          return score / float(n_pools)
      
      
      print("Calculate latent mixing metric")
      latent_mixing = entropy_batch_mixing(
          latent_space=merged_adata.X,
          batches=merged_adata.obs["batch"].values,
          n_neighbors=par["n_neighbors"]
      )
      
      print("Write output")
      adata_out = ad.AnnData(
          uns = {
              "dataset_id": predict_adata.uns["dataset_id"],
              "method_id" : predict_adata.uns["method_id"],
              "metric_ids" : ["latent_mixing"],
              "metric_values" : [latent_mixing]
          }
      )
      
      adata_out.write_h5ad(par['output'], compression = "gzip")
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      python "\$tempscript"
      
      VIASHEOF
      

    dest: "latent_mixing"
    is_executable: true
  description: "Calculate latent mixing metric for joint embedding task."
  tests:
  - type: "python_script"
    path: "../../unit_tests/test_metric.py"
    is_executable: true
  - type: "file"
    path: "../../../../resources_test"
  - type: "file"
    path: "metric_meta_latent_mixing.tsv"
    dest: "metric_meta.tsv"
  info: {}
platform:
  type: "docker"
  id: "docker"
  image: "python:3.8"
  target_registry: "openproblems"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  setup:
  - type: "python"
    user: false
    packages: []
    pip:
    - "anndata"
    - "sklearn"
    - "scipy"
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    oType: "python"
platforms: []
info:
  config: "src/joint_embedding/metrics/latent_mixing/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/joint_embedding_metrics/latent_mixing"
  executable: "target/docker/joint_embedding_metrics/latent_mixing/latent_mixing"
  viash_version: "0.5.2"
  git_commit: "ca7a7098e53c6ae80e6d9e8b861a8ae4a2ad6341"
  git_remote: "git@github.com:openproblems-bio/neurips2021_multimodal_viash.git"
