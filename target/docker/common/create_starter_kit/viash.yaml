functionality:
  name: "create_starter_kit"
  namespace: "common"
  version: "1.3.0"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  arguments:
  - type: "file"
    name: "--src"
    alternatives: []
    default: "src"
    must_exist: false
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--task"
    alternatives: []
    example: "predict_modality"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--task_name"
    alternatives: []
    example: "Predict Modality"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--language"
    alternatives: []
    example: "r"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--language_name"
    alternatives: []
    example: "R"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--language_ext"
    alternatives: []
    example: "R"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--block_starter"
    alternatives: []
    example: "par <- list("
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--evalai_phase"
    alternatives: []
    example: "2276"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--evalai_phase2"
    alternatives: []
    example: "2276"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--memory"
    alternatives: []
    default: "16 GB"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--time"
    alternatives: []
    default: "10m"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--cpus"
    alternatives: []
    default: "8"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--pipeline_version"
    alternatives: []
    default: "0.4.0"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output_dir"
    alternatives: []
    default: "output/starter_kits"
    must_exist: false
    required: false
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--bin"
    alternatives: []
    default: "bin"
    must_exist: false
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ##################################
      #    create_starter_kit 1.3.0    #
      ##################################
      
      # This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "create_starter_kit 1.3.0"
        echo "Create a starter kit."
        echo
        echo "Options:"
      
        echo "   --src"
        echo "        type: file"
        echo "        default: src"
        echo ""
      
      
        echo "   --task"
        echo "        type: string, required parameter"
        echo "        example: predict_modality"
        echo ""
      
      
        echo "   --task_name"
        echo "        type: string, required parameter"
        echo "        example: Predict Modality"
        echo ""
      
      
        echo "   --language"
        echo "        type: string, required parameter"
        echo "        example: r"
        echo ""
      
      
        echo "   --language_name"
        echo "        type: string, required parameter"
        echo "        example: R"
        echo ""
      
      
        echo "   --language_ext"
        echo "        type: string, required parameter"
        echo "        example: R"
        echo ""
      
      
        echo "   --block_starter"
        echo "        type: string, required parameter"
        echo "        example: par <- list("
        echo ""
      
      
        echo "   --evalai_phase"
        echo "        type: string, required parameter"
        echo "        example: 2276"
        echo ""
      
      
        echo "   --evalai_phase2"
        echo "        type: string, required parameter"
        echo "        example: 2276"
        echo ""
      
      
        echo "   --memory"
        echo "        type: string"
        echo "        default: 16 GB"
        echo ""
      
      
        echo "   --time"
        echo "        type: string"
        echo "        default: 10m"
        echo ""
      
      
        echo "   --cpus"
        echo "        type: string"
        echo "        default: 8"
        echo ""
      
      
        echo "   --pipeline_version"
        echo "        type: string"
        echo "        default: 0.4.0"
        echo ""
      
      
        echo "   --output_dir"
        echo "        type: file, output"
        echo "        default: output/starter_kits"
        echo ""
      
      
        echo "   --bin"
        echo "        type: file"
        echo "        default: bin"
        echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Running 'docker pull $1'"
        docker pull $1 && return 0 || return 1
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        set +e
        ViashDockerPull $1
        out=$?
        set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          set +e
          docker push $VSHD_ID
          outPush=$?
          set -e
          if [ $outPush -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' push succeeded."
          else
            ViashError "Container '$VSHD_ID' push errored."
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            set +e
            docker push $1 > /dev/null 2> /dev/null
            outPush=$?
            set -e
            if [ $outPush -eq 0 ]; then
              ViashNotice "Container '$VSHD_ID' push succeeded."
            else
            ViashError "Container '$VSHD_ID' push errored."
              exit 1
            fi
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM ubuntu:21.04
      
      RUN apt-get update && \
        apt-get install -y wget zip openjdk-17-jre-headless && \
        rm -rf /var/lib/apt/lists/*
      
      RUN wget https://github.com/viash-io/viash/releases/download/0.5.2/viash -O /usr/bin/viash && chmod +x /usr/bin/viash
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
      
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-create_starter_kit-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Running 'docker build -t $@ $tmpdir'"
        set +e
        if [ $VIASH_VERBOSITY -ge 6 ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        set -e
        if [ ! $out -eq 0 ]; then
          ViashError "Error occurred while building the container $@."
          if [ ! $VIASH_VERBOSITY -ge 6 ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "create_starter_kit 1.3.0"
                  exit
                  ;;
              --src)
                  VIASH_PAR_SRC="$2"
                  shift 2
                  ;;
              --src=*)
                  VIASH_PAR_SRC=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --task)
                  VIASH_PAR_TASK="$2"
                  shift 2
                  ;;
              --task=*)
                  VIASH_PAR_TASK=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --task_name)
                  VIASH_PAR_TASK_NAME="$2"
                  shift 2
                  ;;
              --task_name=*)
                  VIASH_PAR_TASK_NAME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --language)
                  VIASH_PAR_LANGUAGE="$2"
                  shift 2
                  ;;
              --language=*)
                  VIASH_PAR_LANGUAGE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --language_name)
                  VIASH_PAR_LANGUAGE_NAME="$2"
                  shift 2
                  ;;
              --language_name=*)
                  VIASH_PAR_LANGUAGE_NAME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --language_ext)
                  VIASH_PAR_LANGUAGE_EXT="$2"
                  shift 2
                  ;;
              --language_ext=*)
                  VIASH_PAR_LANGUAGE_EXT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --block_starter)
                  VIASH_PAR_BLOCK_STARTER="$2"
                  shift 2
                  ;;
              --block_starter=*)
                  VIASH_PAR_BLOCK_STARTER=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --evalai_phase)
                  VIASH_PAR_EVALAI_PHASE="$2"
                  shift 2
                  ;;
              --evalai_phase=*)
                  VIASH_PAR_EVALAI_PHASE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --evalai_phase2)
                  VIASH_PAR_EVALAI_PHASE2="$2"
                  shift 2
                  ;;
              --evalai_phase2=*)
                  VIASH_PAR_EVALAI_PHASE2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --memory)
                  VIASH_PAR_MEMORY="$2"
                  shift 2
                  ;;
              --memory=*)
                  VIASH_PAR_MEMORY=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --time)
                  VIASH_PAR_TIME="$2"
                  shift 2
                  ;;
              --time=*)
                  VIASH_PAR_TIME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --cpus)
                  VIASH_PAR_CPUS="$2"
                  shift 2
                  ;;
              --cpus=*)
                  VIASH_PAR_CPUS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --pipeline_version)
                  VIASH_PAR_PIPELINE_VERSION="$2"
                  shift 2
                  ;;
              --pipeline_version=*)
                  VIASH_PAR_PIPELINE_VERSION=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output_dir)
                  VIASH_PAR_OUTPUT_DIR="$2"
                  shift 2
                  ;;
              --output_dir=*)
                  VIASH_PAR_OUTPUT_DIR=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --bin)
                  VIASH_PAR_BIN="$2"
                  shift 2
                  ;;
              --bin=*)
                  VIASH_PAR_BIN=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  ViashDockerSetup 'openproblems/common_create_starter_kit:1.3.0' "$2"
                  exit 0
                  ;;
              ---setup=*)
                  ViashDockerSetup 'openproblems/common_create_starter_kit:1.3.0' "$(ViashRemoveFlags "$1")"
                  exit 0
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/common_create_starter_kit:1.3.0"
                  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/common_create_starter_kit:1.3.0
                  exit 0
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_TASK" ]; then
        ViashError '--task' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_TASK_NAME" ]; then
        ViashError '--task_name' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_LANGUAGE" ]; then
        ViashError '--language' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_LANGUAGE_NAME" ]; then
        ViashError '--language_name' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_LANGUAGE_EXT" ]; then
        ViashError '--language_ext' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_BLOCK_STARTER" ]; then
        ViashError '--block_starter' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_EVALAI_PHASE" ]; then
        ViashError '--evalai_phase' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_EVALAI_PHASE2" ]; then
        ViashError '--evalai_phase2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_SRC" ]; then
        VIASH_PAR_SRC="src"
      fi
      if [ -z "$VIASH_PAR_MEMORY" ]; then
        VIASH_PAR_MEMORY="16 GB"
      fi
      if [ -z "$VIASH_PAR_TIME" ]; then
        VIASH_PAR_TIME="10m"
      fi
      if [ -z "$VIASH_PAR_CPUS" ]; then
        VIASH_PAR_CPUS="8"
      fi
      if [ -z "$VIASH_PAR_PIPELINE_VERSION" ]; then
        VIASH_PAR_PIPELINE_VERSION="0.4.0"
      fi
      if [ -z "$VIASH_PAR_OUTPUT_DIR" ]; then
        VIASH_PAR_OUTPUT_DIR="output/starter_kits"
      fi
      if [ -z "$VIASH_PAR_BIN" ]; then
        VIASH_PAR_BIN="bin"
      fi
      
      ViashDockerSetup 'openproblems/common_create_starter_kit:1.3.0' ifneedbepullelsecachedbuild
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_SRC" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_SRC")"
        VIASH_PAR_SRC=$(ViashAutodetectMount "$VIASH_PAR_SRC")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT_DIR" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_DIR")"
        VIASH_PAR_OUTPUT_DIR=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_DIR")
      fi
      if [ ! -z "$VIASH_PAR_BIN" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_BIN")"
        VIASH_PAR_BIN=$(ViashAutodetectMount "$VIASH_PAR_BIN")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      
      # change file ownership
      function viash_perform_chown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT_DIR" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/common_create_starter_kit:1.3.0 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_DIR"
        fi
      }
      trap viash_perform_chown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openproblems/common_create_starter_kit:1.3.0
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-create_starter_kit-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      #!/bin/bash
      
      set -e
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par_src='$VIASH_PAR_SRC'
      par_task='$VIASH_PAR_TASK'
      par_task_name='$VIASH_PAR_TASK_NAME'
      par_language='$VIASH_PAR_LANGUAGE'
      par_language_name='$VIASH_PAR_LANGUAGE_NAME'
      par_language_ext='$VIASH_PAR_LANGUAGE_EXT'
      par_block_starter='$VIASH_PAR_BLOCK_STARTER'
      par_evalai_phase='$VIASH_PAR_EVALAI_PHASE'
      par_evalai_phase2='$VIASH_PAR_EVALAI_PHASE2'
      par_memory='$VIASH_PAR_MEMORY'
      par_time='$VIASH_PAR_TIME'
      par_cpus='$VIASH_PAR_CPUS'
      par_pipeline_version='$VIASH_PAR_PIPELINE_VERSION'
      par_output_dir='$VIASH_PAR_OUTPUT_DIR'
      par_bin='$VIASH_PAR_BIN'
      
      resources_dir="$VIASH_RESOURCES_DIR"
      
      ## VIASH END
      
      input_dir="\$par_src/\$par_task/starter_kit/starter_kit_\$par_language"
      output_dir="\$par_output_dir/starter_kit-\$par_task-\$par_language"
      
      echo ">> Creating \$par_task_name starter kit for \$par_language_name users."
      
      echo "  Remove previous results"
      [[ -d \$output_dir ]] && rm -r \$output_dir
      
      echo "  Create new output dir"
      mkdir -p \$output_dir/scripts
      
      echo "  Copy template files"
      cp \$resources_dir/template_files/README.md \$output_dir/
      cp \$resources_dir/template_files/0_sys_checks.sh \$output_dir/scripts/
      cp \$resources_dir/template_files/1_unit_test.sh \$output_dir/scripts/
      cp \$resources_dir/template_files/2_generate_phase1v2_submission.sh \$output_dir/scripts/
      cp \$resources_dir/template_files/3_evaluate_submission.sh \$output_dir/scripts/
      cp \$resources_dir/template_files/4_generate_phase2_submission.sh \$output_dir/scripts/
      cp \$resources_dir/template_files/nextflow.config \$output_dir/scripts/
      cp \$resources_dir/template_files/LICENSE \$output_dir/
      cp \$resources_dir/template_files/.gitignore \$output_dir/
      
      echo "  Run viash dockerfile"
      dockerfile=\$(viash run \$input_dir/config.vsh.yaml -- ---dockerfile | sed 's#^#\\t#' | sed ':a;N;\$!ba;s/\\n/\\\\n/g' | sed 's#&#\\\\\\&#g')
      
      echo "  Replace terms in templates"
      for file in \$(find \$output_dir/ -type f); do
        sed -i "s#\\\\\\\$par_task_name#\$par_task_name#g" \$file
        sed -i "s#\\\\\\\$par_task#\$par_task#g" \$file
        sed -i "s#\\\\\\\$par_language_name#\$par_language_name#g" \$file
        sed -i "s#\\\\\\\$par_language#\$par_language#g" \$file
        sed -i "s#\\\\\\\$par_evalai_phase2#\$par_evalai_phase2#g" \$file
        sed -i "s#\\\\\\\$par_evalai_phase#\$par_evalai_phase#g" \$file
        sed -i "s#\\\\\\\$par_memory#\$par_memory#g" \$file
        sed -i "s#\\\\\\\$par_time#\$par_time#g" \$file
        sed -i "s#\\\\\\\$par_cpus#\$par_cpus#g" \$file
        sed -i "s#\\\\\\\$par_pipeline_version#\$par_pipeline_version#g" \$file
        sed -i "s~\\\\\\\$codeblock_dockerfile~\$dockerfile~g" \$file
      done
      
      
      echo "  Copy executables"
      mkdir \$output_dir/bin
      cp \$par_bin/viash \$output_dir/bin/
      cp \$par_bin/nextflow \$output_dir/bin/
      
      echo "  Copy scripts"
      cp \$input_dir/config.vsh.yaml \$output_dir/config.vsh.yaml
      cat \$input_dir/script.\$par_language_ext  | sed "s#resources_test/\$par_task#sample_data#g" > \$output_dir/script.\$par_language_ext
      
      unit_test=\$par_src/\$par_task/unit_tests/test_method.\$par_language_ext
      if [[ -f \$unit_test ]]; then
        echo "  Copy unit test"
        cat \$unit_test | sed "s#resources_test/\$par_task#sample_data#g" > \$output_dir/test.\$par_language_ext
      fi
      
      echo "  Build check_format component"
      viash build \$par_src/\$par_task/metrics/check_format/config.vsh.yaml -p docker -o \$output_dir/bin/
      
      # todo: update to multisample
      echo "  Copy sample resources"
      rsync -avzr \$resources_dir/resources_test/\$par_task/ \$output_dir/sample_data/ \\
        --include="*/" --include="*mod[12].h5ad" --include="*solution.h5ad" --include="*sol.h5ad" --exclude="*" # --dry-run
      
      echo "  Zipping starter kit"
      [ -f \${output_dir}.zip ] && rm \${output_dir}.zip
      cd  \${output_dir} && zip -9 -q -r ../\$(basename \$output_dir).zip *
      
      echo "  Starter kit is done!"
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      bash "\$tempscript"
      
      VIASHEOF
      

    dest: "create_starter_kit"
    is_executable: true
  - type: "file"
    path: "template_files"
  - type: "file"
    path: "../../../../resources_test"
  description: "Create a starter kit."
  tests: []
  info: {}
platform:
  type: "docker"
  id: "docker"
  image: "ubuntu:21.04"
  target_registry: "openproblems"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  setup:
  - type: "apt"
    packages:
    - "wget"
    - "zip"
    - "openjdk-17-jre-headless"
    oType: "apt"
  - type: "docker"
    resources: []
    run:
    - "wget https://github.com/viash-io/viash/releases/download/0.5.2/viash -O /usr/bin/viash\
      \ && chmod +x /usr/bin/viash"
    build_args: []
    env: []
    oType: "docker"
platforms: []
info:
  config: "src/common/create_starter_kits/create_starter_kit/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/common/create_starter_kit"
  executable: "target/docker/common/create_starter_kit/create_starter_kit"
  viash_version: "0.5.2"
  git_commit: "27287ccc258911055908d0e5cb5fda1bce9399c4"
  git_remote: "git@github.com:openproblems-bio/neurips2021_multimodal_viash.git"
