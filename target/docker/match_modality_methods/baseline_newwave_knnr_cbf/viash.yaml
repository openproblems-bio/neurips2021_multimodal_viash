functionality:
  name: "baseline_newwave_knnr_cbf"
  namespace: "match_modality_methods"
  version: "1.0.2"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "author"
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  arguments:
  - type: "file"
    name: "--input_train_mod1"
    alternatives: []
    description: "The censored shuffled train mod1 profiles."
    example: "dataset_censored.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_train_mod2"
    alternatives: []
    description: "The censored shuffled train mod2 profiles."
    example: "dataset_censored.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_train_sol"
    alternatives: []
    description: "The pairing of train mod1&mod2 profiles."
    example: "dataset_solution.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_test_mod1"
    alternatives: []
    description: "The censored shuffled test mod1 profiles."
    example: "dataset_censored.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_test_mod2"
    alternatives: []
    description: "The censored shuffled test mod2 profiles."
    example: "dataset_censored.h5ad"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_pop"
    alternatives: []
    description: "Population size."
    default: 300
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--newwave_maxiter"
    alternatives: []
    description: "Maximum number of NewWave iterations."
    default: 40
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--newwave_ngene"
    alternatives: []
    description: "Setting of the n_gene_par NewWave parameter."
    default: 200
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--newwave_ncell"
    alternatives: []
    description: "Setting of the n_cell_par NewWave parameter."
    default: 200
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "The predicted pairing of test mod1&mod2 profiles."
    example: "output.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      #########################################
      #    baseline_newwave_knnr_cbf 1.0.2    #
      #########################################
      
      # This wrapper script is auto-generated by viash 0.5.2 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "baseline_newwave_knnr_cbf 1.0.2"
        echo "Perform DR with NewWave, predict embedding with KNN regression, and matching cells with a consensus best fit algorithm."
        echo
        echo "Options:"
      
        echo "   --input_train_mod1"
        echo "        type: file, required parameter"
        echo "        example: dataset_censored.h5ad"
        echo "        The censored shuffled train mod1 profiles."
        echo ""
      
      
        echo "   --input_train_mod2"
        echo "        type: file, required parameter"
        echo "        example: dataset_censored.h5ad"
        echo "        The censored shuffled train mod2 profiles."
        echo ""
      
      
        echo "   --input_train_sol"
        echo "        type: file, required parameter"
        echo "        example: dataset_solution.h5ad"
        echo "        The pairing of train mod1&mod2 profiles."
        echo ""
      
      
        echo "   --input_test_mod1"
        echo "        type: file, required parameter"
        echo "        example: dataset_censored.h5ad"
        echo "        The censored shuffled test mod1 profiles."
        echo ""
      
      
        echo "   --input_test_mod2"
        echo "        type: file, required parameter"
        echo "        example: dataset_censored.h5ad"
        echo "        The censored shuffled test mod2 profiles."
        echo ""
      
      
        echo "   --n_pop"
        echo "        type: integer"
        echo "        default: 300"
        echo "        Population size."
        echo ""
      
      
        echo "   --newwave_maxiter"
        echo "        type: integer"
        echo "        default: 40"
        echo "        Maximum number of NewWave iterations."
        echo ""
      
      
        echo "   --newwave_ngene"
        echo "        type: integer"
        echo "        default: 200"
        echo "        Setting of the n_gene_par NewWave parameter."
        echo ""
      
      
        echo "   --newwave_ncell"
        echo "        type: integer"
        echo "        default: 200"
        echo "        Setting of the n_cell_par NewWave parameter."
        echo ""
      
      
        echo "   --output"
        echo "        type: file, required parameter, output"
        echo "        example: output.h5ad"
        echo "        The predicted pairing of test mod1&mod2 profiles."
        echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Running 'docker pull $1'"
        docker pull $1 && return 0 || return 1
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        set +e
        ViashDockerPull $1
        out=$?
        set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          set +e
          docker push $VSHD_ID
          outPush=$?
          set -e
          if [ $outPush -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' push succeeded."
          else
            ViashError "Container '$VSHD_ID' push errored."
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            set +e
            docker push $1 > /dev/null 2> /dev/null
            outPush=$?
            set -e
            if [ $outPush -eq 0 ]; then
              ViashNotice "Container '$VSHD_ID' push succeeded."
            else
            ViashError "Container '$VSHD_ID' push errored."
              exit 1
            fi
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM dataintuitive/randpy:r4.0_py3.8_bioc3.12
      
      RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
        Rscript -e 'if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")' && \
        Rscript -e 'if (!requireNamespace("SingleCellExperiment", quietly = TRUE)) BiocManager::install("SingleCellExperiment")' && \
        Rscript -e 'if (!requireNamespace("NewWave", quietly = TRUE)) BiocManager::install("NewWave")' && \
        Rscript -e 'remotes::install_cran(c("lmds", "dynutils", "FNN", "pbapply"), repos = "https://cran.rstudio.com")'
      
      RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
        Rscript -e 'remotes::install_cran(c("proxy", "proxyC"), repos = "https://cran.rstudio.com")'
      
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
      
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-baseline_newwave_knnr_cbf-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Running 'docker build -t $@ $tmpdir'"
        set +e
        if [ $VIASH_VERBOSITY -ge 6 ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        set -e
        if [ ! $out -eq 0 ]; then
          ViashError "Error occurred while building the container $@."
          if [ ! $VIASH_VERBOSITY -ge 6 ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "baseline_newwave_knnr_cbf 1.0.2"
                  exit
                  ;;
              --input_train_mod1)
                  VIASH_PAR_INPUT_TRAIN_MOD1="$2"
                  shift 2
                  ;;
              --input_train_mod1=*)
                  VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_train_mod2)
                  VIASH_PAR_INPUT_TRAIN_MOD2="$2"
                  shift 2
                  ;;
              --input_train_mod2=*)
                  VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_train_sol)
                  VIASH_PAR_INPUT_TRAIN_SOL="$2"
                  shift 2
                  ;;
              --input_train_sol=*)
                  VIASH_PAR_INPUT_TRAIN_SOL=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_test_mod1)
                  VIASH_PAR_INPUT_TEST_MOD1="$2"
                  shift 2
                  ;;
              --input_test_mod1=*)
                  VIASH_PAR_INPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_test_mod2)
                  VIASH_PAR_INPUT_TEST_MOD2="$2"
                  shift 2
                  ;;
              --input_test_mod2=*)
                  VIASH_PAR_INPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_pop)
                  VIASH_PAR_N_POP="$2"
                  shift 2
                  ;;
              --n_pop=*)
                  VIASH_PAR_N_POP=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --newwave_maxiter)
                  VIASH_PAR_NEWWAVE_MAXITER="$2"
                  shift 2
                  ;;
              --newwave_maxiter=*)
                  VIASH_PAR_NEWWAVE_MAXITER=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --newwave_ngene)
                  VIASH_PAR_NEWWAVE_NGENE="$2"
                  shift 2
                  ;;
              --newwave_ngene=*)
                  VIASH_PAR_NEWWAVE_NGENE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --newwave_ncell)
                  VIASH_PAR_NEWWAVE_NCELL="$2"
                  shift 2
                  ;;
              --newwave_ncell=*)
                  VIASH_PAR_NEWWAVE_NCELL=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  ViashDockerSetup 'openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2' "$2"
                  exit 0
                  ;;
              ---setup=*)
                  ViashDockerSetup 'openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2' "$(ViashRemoveFlags "$1")"
                  exit 0
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2"
                  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2
                  exit 0
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
        ViashError '--input_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
        ViashError '--input_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TRAIN_SOL" ]; then
        ViashError '--input_train_sol' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
        ViashError '--input_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TEST_MOD2" ]; then
        ViashError '--input_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_N_POP" ]; then
        VIASH_PAR_N_POP="300"
      fi
      if [ -z "$VIASH_PAR_NEWWAVE_MAXITER" ]; then
        VIASH_PAR_NEWWAVE_MAXITER="40"
      fi
      if [ -z "$VIASH_PAR_NEWWAVE_NGENE" ]; then
        VIASH_PAR_NEWWAVE_NGENE="200"
      fi
      if [ -z "$VIASH_PAR_NEWWAVE_NCELL" ]; then
        VIASH_PAR_NEWWAVE_NCELL="200"
      fi
      
      ViashDockerSetup 'openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2' ifneedbepullelsecachedbuild
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_TRAIN_MOD1")"
        VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashAutodetectMount "$VIASH_PAR_INPUT_TRAIN_MOD1")
      fi
      if [ ! -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_TRAIN_MOD2")"
        VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashAutodetectMount "$VIASH_PAR_INPUT_TRAIN_MOD2")
      fi
      if [ ! -z "$VIASH_PAR_INPUT_TRAIN_SOL" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_TRAIN_SOL")"
        VIASH_PAR_INPUT_TRAIN_SOL=$(ViashAutodetectMount "$VIASH_PAR_INPUT_TRAIN_SOL")
      fi
      if [ ! -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_TEST_MOD1")"
        VIASH_PAR_INPUT_TEST_MOD1=$(ViashAutodetectMount "$VIASH_PAR_INPUT_TEST_MOD1")
      fi
      if [ ! -z "$VIASH_PAR_INPUT_TEST_MOD2" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_TEST_MOD2")"
        VIASH_PAR_INPUT_TEST_MOD2=$(ViashAutodetectMount "$VIASH_PAR_INPUT_TEST_MOD2")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      
      # change file ownership
      function viash_perform_chown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2 "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap viash_perform_chown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openproblems/match_modality_methods_baseline_newwave_knnr_cbf:1.0.2
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-baseline_newwave_knnr_cbf-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      cat("Loading dependencies\\n")
      options(tidyverse.quiet = TRUE)
      library(tidyverse)
      requireNamespace("anndata", quietly = TRUE)
      requireNamespace("pbapply", quietly = TRUE)
      library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
      requireNamespace("NewWave", quietly = TRUE)
      requireNamespace("FNN", quietly = TRUE)
      requireNamespace("SingleCellExperiment", quietly = TRUE)
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par <- list(
        "input_train_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD1'"; else echo NULL; fi ),
        "input_train_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD2'"; else echo NULL; fi ),
        "input_train_sol" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_SOL+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_SOL'"; else echo NULL; fi ),
        "input_test_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD1'"; else echo NULL; fi ),
        "input_test_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD2'"; else echo NULL; fi ),
        "n_pop" = $( if [ ! -z ${VIASH_PAR_N_POP+x} ]; then echo "as.integer($VIASH_PAR_N_POP)"; else echo NULL; fi ),
        "newwave_maxiter" = $( if [ ! -z ${VIASH_PAR_NEWWAVE_MAXITER+x} ]; then echo "as.integer($VIASH_PAR_NEWWAVE_MAXITER)"; else echo NULL; fi ),
        "newwave_ngene" = $( if [ ! -z ${VIASH_PAR_NEWWAVE_NGENE+x} ]; then echo "as.integer($VIASH_PAR_NEWWAVE_NGENE)"; else echo NULL; fi ),
        "newwave_ncell" = $( if [ ! -z ${VIASH_PAR_NEWWAVE_NCELL+x} ]; then echo "as.integer($VIASH_PAR_NEWWAVE_NCELL)"; else echo NULL; fi ),
        "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
      )
      
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      ## VIASH END
      
      n_cores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
      
      method_id <- meta\$functionality_name
      
      cat("Reading h5ad files\\n")
      input_train_mod1 <- anndata::read_h5ad(par\$input_train_mod1)
      input_test_mod1 <- anndata::read_h5ad(par\$input_test_mod1)
      
      # fetch a few variables
      train_ix <- seq_len(nrow(input_train_mod1))
      did <- input_train_mod1\$uns[["dataset_id"]]
      batch1 <- c(as.character(input_train_mod1\$obs\$batch), as.character(input_test_mod1\$obs\$batch))
      
      cat("Running NewWave\\n")
      data1 <- SummarizedExperiment::SummarizedExperiment(
        assays = list(counts = cbind(t(input_train_mod1\$layers[["counts"]]), t(input_test_mod1\$layers[["counts"]]))),
        colData = data.frame(batch = factor(batch1))
      )
      data1 <- data1[Matrix::rowSums(SummarizedExperiment::assay(data1)) > 0, ]
      # option 1: filter by HVG
      # data1 <- data1[order(proxyC::rowSds(SummarizedExperiment::assay(data1)), decreasing = TRUE)[1:100], ]
      
      # remove large unneeded dataset objects
      rm(input_train_mod1, input_test_mod1)
      gc()
      
      res1 <- NewWave::newWave(
        data1,
        X = "~batch",
        verbose = TRUE,
        K = 10,
        maxiter_optimize = par\$newwave_maxiter,
        n_gene_par = min(par\$newwave_ngene, nrow(data1)),
        n_cell_par = min(par\$newwave_ncell, ncol(data1)),
        commondispersion = FALSE
      )
      dr_x1 <- SingleCellExperiment::reducedDim(res1)
      
      cat("Reading h5ad files\\n")
      input_train_mod2 <- anndata::read_h5ad(par\$input_train_mod2)
      input_test_mod2 <- anndata::read_h5ad(par\$input_test_mod2)
      input_train_sol <- anndata::read_h5ad(par\$input_train_sol)
      
      # don't know batch ordering in input_test_mod2
      match_train <- input_train_sol\$uns\$pairing_ix + 1
      batch2 <- c(as.character(input_train_sol\$obs\$batch), rep("unknownbatch", nrow(input_test_mod2)))
      
      data2 <- SummarizedExperiment::SummarizedExperiment(
        assays = list(counts = cbind(t(input_train_mod2\$layers[["counts"]][order(match_train), , drop = FALSE]), t(input_test_mod2\$layers[["counts"]]))),
        colData = data.frame(batch = factor(batch2))
      )
      data2 <- data2[Matrix::rowSums(SummarizedExperiment::assay(data2)) > 0, ]
      # data2 <- data2[order(proxyC::rowSds(SummarizedExperiment::assay(data2)), decreasing = TRUE)[1:100], ]
      
      # remove large unneeded dataset objects
      rm(input_train_mod2, input_test_mod2, input_train_sol)
      gc()
      
      cat("Running NewWave\\n")
      res2 <- NewWave::newWave(
        data2,
        X = "~batch",
        verbose = TRUE,
        K = 10,
        maxiter_optimize = par\$newwave_maxiter,
        n_gene_par = min(par\$newwave_ngene, nrow(data2)),
        n_cell_par = min(par\$newwave_ncell, ncol(data2)),
        commondispersion = FALSE
      )
      dr_x2 <- SingleCellExperiment::reducedDim(res2)
      
      colnames(dr_x1) <- paste0("comp_", seq_len(ncol(dr_x1)))
      colnames(dr_x2) <- paste0("comp_", seq_len(ncol(dr_x2)))
      
      # split up DR matrices
      dr_x1_train <- dr_x1[train_ix, , drop = FALSE]
      dr_x1_test <- dr_x1[-train_ix, , drop = FALSE]
      dr_x2_train <- dr_x2[train_ix, , drop = FALSE]
      dr_x2_test <- dr_x2[-train_ix, , drop = FALSE]
      
      cat("Predicting mod1 DR of test cells\\n")
      pred_mod1 <- apply(dr_x1_train, 2, function(yi) {
        FNN::knn.reg(
          train = dr_x2_train,
          test = dr_x2_test,
          y = yi,
          k = min(15, nrow(dr_x1_test))
        )\$pred
      })
      
      cat("Predicting mod2 DR of test cells\\n")
      pred_mod2 <- apply(dr_x2_train, 2, function(yi) {
        FNN::knn.reg(
          train = dr_x1_train,
          test = dr_x1_test,
          y = yi,
          k = min(15, nrow(dr_x1_test))
        )\$pred
      })
      
      cat("Minimising distances between mod1 and mod2 pairs\\n")
      gen_vec <- function(z) {
        int <- seq_len(nrow(pred_mod1))
      
        i <- j <- c()
        resti <- int
        restj <- int
      
        while (length(resti) > 0) {
          ixi <- sample.int(length(resti), 1)
          newi <- resti[[ixi]]
          d1 <- proxy::dist(pred_mod1[restj, , drop = FALSE], dr_x1_test[newi, , drop = FALSE], method = "euclidean")
          d2 <- proxy::dist(pred_mod2[restj, , drop = FALSE], dr_x2_test[newi, , drop = FALSE], method = "euclidean")
          d12 <- d1 + d2
          ixj <- which.min(d12[, 1])
          newj <- restj[[ixj]]
          resti <- resti[-ixi]
          restj <- restj[-ixj]
          i <- c(i, newi)
          j <- c(j, newj)
      
          #  tibble(i, j); tibble(resti, restj)
        }
      
        tibble::tibble(i, j)
      }
      outs <- pbapply::pblapply(seq_len(par\$n_pop), cl = n_cores, gen_vec)
      
      # outs <- lapply(seq_len(par\$n_pop), gen_vec)
      df <- bind_rows(outs) %>%
        group_by(i, j) %>%
        summarise(n = n(), .groups = "drop") %>%
        arrange(desc(n)) %>%
        mutate(gold = i == j)
      
      knn_mat <- Matrix::sparseMatrix(
        i = df\$i,
        j = df\$j,
        x = df\$n,
        dims = list(nrow(dr_x1_test), nrow(dr_x2_test))
      )
      
      # normalise to make rows sum to 1
      rs <- Matrix::rowSums(knn_mat)
      knn_mat@x <- knn_mat@x / rs[knn_mat@i + 1]
      
      cat("Creating output anndata\\n")
      out <- anndata::AnnData(
        X = as(knn_mat, "CsparseMatrix"),
        uns = list(
          dataset_id = did,
          method_id = method_id
        )
      )
      
      cat("Writing predictions to file\\n")
      zzz <- out\$write_h5ad(par\$output, compression = "gzip")
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      Rscript "\$tempscript"
      
      VIASHEOF
      

    dest: "baseline_newwave_knnr_cbf"
    is_executable: true
  description: "Perform DR with NewWave, predict embedding with KNN regression, and\
    \ matching cells with a consensus best fit algorithm."
  tests:
  - type: "r_script"
    path: "../../unit_tests/test_method.R"
    is_executable: true
  - type: "file"
    path: "../../../../resources_test"
  info:
    type: "baseline"
    label: "NewWave+KNNR+CBF"
platform:
  type: "docker"
  id: "docker"
  image: "dataintuitive/randpy:r4.0_py3.8_bioc3.12"
  target_registry: "openproblems"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  setup:
  - type: "r"
    packages:
    - "lmds"
    - "dynutils"
    - "FNN"
    - "pbapply"
    cran: []
    bioc:
    - "SingleCellExperiment"
    - "NewWave"
    git: []
    github: []
    gitlab: []
    bitbucket: []
    svn: []
    url: []
    script: []
    bioc_force_install: false
    oType: "r"
  - type: "r"
    packages:
    - "proxy"
    - "proxyC"
    cran: []
    bioc: []
    git: []
    github: []
    gitlab: []
    bitbucket: []
    svn: []
    url: []
    script: []
    bioc_force_install: false
    oType: "r"
platforms: []
info:
  config: "src/match_modality/methods/baseline_newwave_knnr_cbf/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/match_modality_methods/baseline_newwave_knnr_cbf"
  executable: "target/docker/match_modality_methods/baseline_newwave_knnr_cbf/baseline_newwave_knnr_cbf"
  viash_version: "0.5.2"
  git_commit: "63d9263e7e6d53856b6570fda587ba3da006041f"
  git_remote: "git@github.com:openproblems-bio/neurips2021_multimodal_viash.git"
